components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: Basic authentication for login requests
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token for authenticated routes

  schemas:
    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: "#/components/schemas/Token"
        refresh:
          $ref: "#/components/schemas/Token"
      example:
        access:
          token: "newAccessToken123"
          expires: "2024-12-31T23:59:59Z"
        refresh:
          token: "newRefreshToken123"
          expires: "2024-12-31T23:59:59Z"

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

    BusinessType:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the business type
        name:
          type: string
          description: Name of the business type
        status:
          type: string
          enum: [1, 0]
          description: Status of the business type (1 for active, 0 for inactive)
      example:
        id: "613b6f7a84d1b7f2b09467c5"
        name: "Retail"
        status: "1"

    ChangePasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
          description: The current password of the user
        password:
          type: string
          description: The new password
      required:
        - currentPassword
        - password
      example:
        oldPassword: "oldPassword123"
        password: "newPassword123"

    VerifyOtpRequestAdmin:
      type: object
      required:
        - email
        - otp
      properties:
        email:
          type: string
        otp:
          type: number
          description: "The one-time password (OTP) for verification"

    VerifyOtpRequestUser:
      type: object
      required:
        - id
        - otp
      properties:
        id:
          type: string
          description: "The user's unique ID (must be a valid MongoDB ObjectId)"
          pattern: "^[a-fA-F0-9]{24}$" # Regex pattern for MongoDB ObjectId
        otp:
          type: number
          description: "The one-time password (OTP) for verification"

    ResendOtpRequest:
      type: object
      required:
        - userId
        - otpType
      properties:
        userId:
          type: string
          description: "The user's unique ID (must be a valid MongoDB ObjectId)"
          pattern: "^[a-fA-F0-9]{24}$" # Regex pattern for MongoDB ObjectId
        otpType:
          type: string
          description: "The OTP type to resend. Possible values are 'email' and 'passwordReset'."
          enum:
            - email
            - passwordReset
          example: email/passwordReset

    UserProfile:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the user
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        bio:
          type: string
          description: Short bio or description of the user
        socialMediaLinks:
          type: array
          items:
            type: string
            format: uri
          maxItems: 5
          description: Array of up to 5 social media links (e.g., Facebook, Instagram)
        profilePhoto:
          type: string
          format: binary
          description: URL of the user's profilePhoto image
        followersCount:
          type: integer
          description: Number of followers the user has
        followingCount:
          type: integer
          description: Number of users the user is following
      required:
        - id
        - name
        - email
        - phone
        - bio
      example:
        id: "user123"
        name: "John Doe"
        email: "johndoe@example.com"
        phone: "+1234567890"
        bio: "This is a short bio about John Doe."
        profilePhoto: "/images/profile/johndoe.jpg"

    CartItem:
      type: object
      properties:
        productId:
          type: string
          description: The ID of the product or food item
          example: 66fc32743be26b54e9be9085
        quantity:
          type: integer
          description: Quantity of the item to add to the cart
          example: 2
        selectedSize:
          type: string
          description: Size of the item (if applicable)
          example: M
        selectedColor:
          type: string
          description: Color of the item (if applicable)
          example: Red
        price:
          type: number
          description: The price of the item
          example: 10.99

    DeliveryAddress:
      type: object
      properties:
        name:
          type: string
          description: The name of the person receiving the order
          example: John Doe
        street:
          type: string
          description: Street address
          example: 123 Main St
        city:
          type: string
          description: City of the delivery address
          example: New York
        state:
          type: string
          description: State of the delivery address
          example: NY
        country:
          type: string
          description: Country of the delivery address
          example: USA
        postalCode:
          type: string
          description: Postal code
          example: 10001
        phone:
          type: string
          description: Contact phone number
          example: 555-1234

    Items:
      type: object
      properties:
        itemType:
          type: string
          description: The type of the item (food, room, product)
          example: food
        businessId:
          type: string
          description: The ID of the associated business (ObjectId)
          example: 60d0fe4f5311236168a109ca
        businessTypeId:
          type: string
          description: The ID of the associated business type (ObjectId)
          example: 60d0fe4f5311236168a109cb
        available:
          type: boolean
          description: Availability status of the item
          example: true
        images:
          type: array
          items:
            type: string
            description: Image URLs for the item
          example:
            - "https://example.com/image1.jpg"
        # For food items
        dishName:
          type: string
          example: Pizza
        dishDescription:
          type: string
          example: "Delicious pizza with extra cheese"
        dishPrice:
          type: number
          example: 10.99
        dineInStatus:
          type: boolean
          example: true
        operatingDetails:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                example: "2024-10-01"
              startTime:
                type: string
                example: "10:00 AM"
              endTime:
                type: string
                example: "10:00 PM"
        tableManagement:
          type: array
          items:
            type: object
            properties:
              tableNumber:
                type: string
                example: "Table 1"
              seatingCapacity:
                type: number
                example: 4
        # For room items
        roomName:
          type: string
          example: "Deluxe Room"
        roomType:
          type: string
          example: "Suite"
        roomDescription:
          type: string
          example: "Spacious room with sea view"
        roomPrice:
          type: number
          example: 150
        roomTax:
          type: number
          example: 20
        checkIn:
          type: string
          example: "2:00 PM"
        checkOut:
          type: string
          example: "11:00 AM"
        amenities:
          type: array
          items:
            type: string
          example:
            - "WiFi"
            - "Air Conditioning"
            - "Pool"
        # For product items
        productName:
          type: string
          example: "T-Shirt"
        productCategory:
          type: string
          example: "Clothing"
        productDescription:
          type: string
          example: "Comfortable cotton t-shirt"
        productPrice:
          type: number
          example: 25.99
        variants:
          type: array
          items:
            type: object
            properties:
              variantName:
                type: string
                example: "Medium"
              size:
                type: string
                example: "M"
              color:
                type: string
                example: "Red"
              productPrice:
                type: number
                example: 29.99
              nonReturnable:
                type: boolean
                example: false

    PartnerBusiness:
      type: object
      properties:
        businessName:
          type: string
          description: Name of the business
          example: "My Awesome Business"
        businessType:
          type: string
          description: The ObjectId of the business type
          example: "66db3c19490360a26a552adb"
        businessDescription:
          type: string
          description: A brief description of the business
          example: "We provide high-quality services and offer a wide range of services and products for our customers."
        countryCode:
          type: string
          example: "+91"
        mobile:
          type: string
          description: Business mobile number
          example: "1234567890"
        email:
          type: string
          description: Business email address
          example: "business@example.com"
        businessAddress:
          type: object
          description: Business address details
          properties:
            street:
              type: string
              description: Street address of the business
              example: "123 Business St"
            city:
              type: string
              description: City where the business is located
              example: "City"
            state:
              type: string
              description: State where the business is located
              example: "State"
            country:
              type: string
              description: Country where the business is located
              example: "Country"
            postalCode:
              type: string
              description: Postal code of the business location
              example: "12345"
            latitude:
              type: number
              description: Latitude of the business location
              example: 28.6139
            longitude:
              type: number
              description: Longitude of the business location
              example: 77.2090
            location:
              type: object
              description: GeoJSON location data
              properties:
                type:
                  type: string
                  example: "Point"
                coordinates:
                  type: array
                  items:
                    type: number
                  description: Coordinates [longitude, latitude] for the location
                  example: [77.2090, 28.6139]
        openingDays:
          type: array
          description: Days of the week when the business is open
          items:
            type: string
            example: "Monday"
          example: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
        sameTimeForAllDays:
          type: boolean
          description: Indicates if the same opening and closing times apply for all days
          example: false
        uniformTiming:
          type: object
          description: The uniform opening and closing timings if `sameTimeForAllDays` is true
          properties:
            openingTime:
              type: string
              example: "09:00 AM"
            closingTime:
              type: string
              example: "06:00 PM"
        daywiseTimings:
          type: array
          description: Daywise timings for the business if `sameTimeForAllDays` is false
          items:
            type: object
            properties:
              day:
                type: string
                description: The day of the week
                example: "Monday"
              openingTime:
                type: string
                description: Opening time for that day
                example: "09:00 AM"
              closingTime:
                type: string
                description: Closing time for that day
                example: "06:00 PM"
        images:
          type: array
          description: List of image URLs for the business
          items:
            type: string
            example: "https://example.com/image1.jpg"

    DineOutRequest:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the dine-out request
        user:
          type: string
          description: The ID of the user who made the request
        partner:
          type: string
          description: The ID of the partner (restaurant/hotel)
        business:
          type: string
          description: The ID of the business associated with the request
        date:
          type: string
          format: date
          description: The date of the dine-out
        time:
          type: string
          description: The time of the dine-out
        guests:
          type: integer
          description: The number of guests for the dine-out
        dinnerType:
          type: string
          description: Type of dinner (e.g., Dinner, Lunch, etc.)
        status:
          type: string
          enum: [Pending, Accepted, Rejected]
          description: The current status of the dine-out request
        bookingId:
          type: string
          description: The booking ID (if confirmed)
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Post:
      type: object
      properties:
        userId:
          type: string
          description: ID of the user who created the post
        caption:
          type: string
        images:
          type: array
          items:
            type: string
            format: binary
        likes:
          type: number
        comments:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
              postedBy:
                type: string
                description: User ID of the person who commented
              postedAt:
                type: string
                format: date-time
        postedAt:
          type: string
          format: date-time

    FAQ:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the FAQ
        question:
          type: string
          description: The question of the FAQ
        answer:
          type: string
          description: The answer to the FAQ
        status:
          type: string
          enum: [active, inactive]
          description: The status of the FAQ
      required:
        - id
        - question
        - answer
      example:
        id: "faq123"
        question: "How can I reset my password?"
        answer: "Go to the account settings and click on 'Reset Password'."
        status: "active"

    StaticContent:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the static content
        type:
          type: string
          enum: [terms, refund_policy, shipping_policy, privacy]
          description: Type of static content
        title:
          type: string
          description: Title of the content
        content:
          type: string
          description: The static content body
        status:
          type: string
          enum: [active, inactive]
          description: Status of the static content
      required:
        - id
        - type
        - title
        - content
      example:
        id: "content123"
        type: "terms"
        title: "Terms and Conditions"
        content: "These are the terms and conditions for using our service."
        status: "active"
    # Other schemas like Admin, VerifyOtpRequestUser, VerifyOtpRequestPartner...

  responses:
    DuplicateEmail:
      description: Email already exists
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Unauthorized:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    PasswordMismatch:
      description: The new password and confirm password do not match
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    InvalidCurrentPassword:
      description: The current password is invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

paths:
  /admin/auth/login:
    post:
      summary: Super Admin login with email or mobile and password
      tags:
        - Super Admin
      security:
        - basicAuth: [] # Use Basic Auth for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrPhone:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - emailOrPhone
                - password
      responses:
        "200":
          description: Super Admin logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /admin/auth/refresh-tokens:
    post:
      summary: Refresh Token for Super Admin
      tags:
        - Super Admin
      security:
        - basicAuth: [] # Use Basic Auth for refreshing tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: The refresh token provided during login
              required:
                - refreshToken
      responses:
        "200":
          description: New access token generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        "400":
          description: Invalid refresh token
        "401":
          description: Unauthorized

  /admin/{id}:
    get:
      summary: Retrieve an admin by ID
      tags:
        - Super Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the admin to retrieve
          schema:
            type: string
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Admin retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update Super Admin profile by ID
      tags:
        - Super Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the admin to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Admin"
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Admin profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Admin"
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          description: Invalid request data
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/auth/forgot-password:
    post:
      summary: Send reset password OTP to admin's email
      tags:
        - Super Admin
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        "200":
          description: Reset password link sent successfully
        "404":
          $ref: "#/components/responses/NotFound"

  /admin/auth/verify-email-otp:
    post:
      summary: Verify password reset email OTP for a admin
      tags:
        - Super Admin
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyOtpRequestAdmin"
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "OTP verified successfully"
        "400":
          description: Invalid OTP or request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"

  /admin/auth/reset-password:
    post:
      summary: Reset password using the provided token
      tags:
        - Super Admin
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Reset password token
                newPassword:
                  type: string
              required:
                - token
                - newPassword
      responses:
        "200":
          description: Password reset successfully
        "400":
          description: Invalid token or new password
        "404":
          $ref: "#/components/responses/NotFound"

  /admin/change-password:
    post:
      summary: Super Admin change password
      tags:
        - Super Admin
      security:
        - bearerAuth: [] # Bearer token required for this route
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Password changed successfully"
        "400":
          $ref: "#/components/responses/PasswordMismatch"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/InvalidCurrentPassword"

  /business-type:
    get:
      summary: Get list of business types
      tags:
        - Business Type
      security:
        - bearerAuth: [] # Bearer token required for this route
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order for business types (asc or desc)
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Limit number of results per page
        - name: searchBy
          in: query
          required: false
          schema:
            type: string
          description: Search business types by name or any specific field
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [1, 0]
          description: Filter by status (active or inactive)
      responses:
        "200":
          description: List of business types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BusinessType"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    post:
      summary: Add a new business type
      tags:
        - Business Type
      security:
        - bearerAuth: [] # Bearer token required for this route
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BusinessType"
      responses:
        "201":
          description: Business type added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessType"
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          $ref: "#/components/responses/Duplicate"

  /business-type/{id}:
    get:
      summary: Get details of a specific business type
      tags:
        - Business Type
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the business type to retrieve
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "200":
          description: Business type details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessType"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update a business type
      tags:
        - Business Type
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the business type to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BusinessType"
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "200":
          description: Business type updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessType"
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    delete:
      summary: Delete a business type
      tags:
        - Business Type
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the business type to delete
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "200":
          description: Business type deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /business-type/for/user:
    get:
      summary: Get list of business types for users (Basic Auth)
      tags:
        - Business Type
      security:
        - basicAuth: [] # Basic authentication for user route
      responses:
        "200":
          description: List of business types for users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BusinessType"
        "401":
          $ref: "#/components/responses/Unauthorized"

  # Users
  /user/auth/register:
    post:
      summary: Register a new user
      tags:
        - User
      security:
        - basicAuth: [] # Use Basic Auth for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                countryCode:
                  type: string
                  example: "+91"
                phone:
                  type: string
                password:
                  type: string
                confirmPassword:
                  type: string
                type:
                  type: string
                  example: user
              required:
                - name
                - email
                - phone
                - password
                - confirmPassword
                - type
      responses:
        "200":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        "400":
          $ref: "#/components/responses/DuplicateEmail"

  /user/auth/verify-mobile-otp:
    post:
      summary: Verify mobile OTP for a user
      tags:
        - User
      security:
        - basicAuth: [] # Use Basic Auth for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyOtpRequestUser"
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "OTP verified successfully"
        "400":
          description: Invalid OTP or request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"

  /user/auth/verify-email-otp:
    post:
      summary: Verify email OTP for a user
      tags:
        - User
      security:
        - basicAuth: [] # Use Basic Auth for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyOtpRequestUser"
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "OTP verified successfully"
        "400":
          description: Invalid OTP or request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"

  /user/auth/login:
    post:
      summary: Login with email or phone and password
      tags:
        - User
      security:
        - basicAuth: [] # Use Basic Auth for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrPhone:
                  type: string
                password:
                  type: string
                type:
                  type: string
                  example: user
                  enum:
                    - user
                    - partner
              required:
                - email
                - password
                - type
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /user/auth/logout:
    post:
      summary: User logout
      tags:
        - User
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: The refresh token to be invalidated
              required:
                - refreshToken
      responses:
        "200":
          description: User logged out successfully
        "401":
          $ref: "#/components/responses/Unauthorized"

  /user/auth/forgot-password:
    post:
      summary: Send forgot password otp to user's email/phone
      tags:
        - User
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrPhone:
                  type: string
                  format: email
                type:
                  type: string
                  enum:
                    - user
              required:
                - emailOrPhone
                - type
      responses:
        "200":
          description: Reset password link sent successfully
        "404":
          $ref: "#/components/responses/NotFound"

  /user/auth/reset-password:
    post:
      summary: Reset password using the provided token
      tags:
        - User
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Reset password token
                newPassword:
                  type: string
              required:
                - token
                - newPassword
      responses:
        "200":
          description: Password reset successfully
        "400":
          description: Invalid token or new password
        "404":
          $ref: "#/components/responses/NotFound"

  /user/auth/resend-otp:
    post:
      summary: Resend OTP for user
      tags:
        - User
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResendOtpRequest"
      responses:
        "200":
          description: OTP resent successfully
        "400":
          description: Invalid request data
        "404":
          $ref: "#/components/responses/NotFound"

  /user/change-password:
    post:
      summary: User change password
      tags:
        - User
      security:
        - bearerAuth: [] # Bearer token required for this route
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Password changed successfully"
        "400":
          $ref: "#/components/responses/PasswordMismatch"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/InvalidCurrentPassword"

  /user/follow/{followingId}:
    post:
      summary: Follow a user
      tags:
        - User
      parameters:
        - in: path
          name: followingId
          required: true
          schema:
            type: string
          description: ID of the user to follow
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully Followed User
        "400":
          description: Bad Request (e.g., trying to follow a partner or yourself)
        "404":
          description: User Not Found
        "500":
          description: Internal Server Error

  /user/unfollow/{followingId}:
    post:
      summary: Unfollow a user
      tags:
        - User
      parameters:
        - in: path
          name: followingId
          required: true
          schema:
            type: string
          description: ID of the user to unfollow
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully Unfollowed User
        "400":
          description: Bad Request (e.g., not following the user)
        "404":
          description: User Not Found
        "500":
          description: Internal Server Error

  # Update email
  /user/update-email:
    patch:
      summary: Update user's email directly
      tags:
        - User
      security:
        - basicAuth: [] # Use Basic Auth for authenticated routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The ID of the partner/user
                email:
                  type: string
                  format: email
              required:
                - userId
                - email
      responses:
        "200":
          description: Email updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Email updated successfully"
        "400":
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  # Update phone
  /user/update-phone:
    patch:
      summary: Update user's phone directly
      tags:
        - User
      security:
        - basicAuth: [] # Use Basic Auth for authenticated routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The ID of the partner/user
                phone:
                  type: string
              required:
                - phone
                - userId
      responses:
        "200":
          description: Phone number updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Phone number updated successfully"
        "400":
          description: Invalid phone number
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /user/profile/{id}:
    get:
      summary: Get user profile by ID
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: string
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update user profile
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the user
                email:
                  type: string
                  format: email
                  description: Email address of the user
                phone:
                  type: string
                  description: Phone number of the user
                bio:
                  type: string
                  description: Short bio or description of the user
                businessName:
                  type: string
                socialMediaLinks[]:
                  type: array
                  items:
                    type: string
                    description: Social media link
                  description: Array of up to 5 social media links (e.g., Facebook, Instagram)
                profilePhoto:
                  type: string
                  format: binary
                  description: Profile photo image file
      security:
        - bearerAuth: [] # Authentication mechanism
      responses:
        "200":
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /user/lists:
    get:
      summary: Users lists to follow
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Users lists retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Users lists retrieved successfully"
        "400":
          description: Invalid User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  # Dine-Out-User
  /dine-out/request/create:
    post:
      summary: Create a new DineOut request (User)
      tags:
        - DineOut Request (USER)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                partnerId:
                  type: string
                  description: The ID of the partner (restaurant or hotel)
                  example: "66f55b28e1419e1561242e3e"
                businessId:
                  type: string
                  description: The business ID associated with the partner
                  example: "66f96392fb4bcb8af802f4c8"
                date:
                  type: string
                  format: date
                  description: Date of the dine-out request
                  example: "2024-10-01"
                time:
                  type: string
                  description: Time of the dine-out request
                  example: "8:00 PM"
                guests:
                  type: integer
                  description: Number of guests for the dine-out
                  example: 4
                dinnerType:
                  type: string
                  description: Type of dinner (e.g., Dinner, Lunch, etc.)
                  example: "Dinner"
      responses:
        "201":
          description: DineOut request created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Dine-out request sent successfully"
                  request:
                    $ref: "#/components/schemas/DineOutRequest"
        "400":
          description: Invalid request (e.g., missing required fields, invalid businessId)

  # Cart
  /cart/add:
    post:
      tags:
        - Cart
      security:
        - bearerAuth: []
      summary: Add an item to the cart (Product/Food)
      requestBody:
        description: The data required to add an item to the cart
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: The ID of the product or food item
                  example: 66fc32743be26b54e9be9085
                quantity:
                  type: integer
                  description: The quantity to add to the cart
                  example: 2
                selectedSize:
                  type: string
                  description: Size of the product (if applicable)
                  example: M
                selectedColor:
                  type: string
                  description: Color of the product (if applicable)
                  example: Red
                deliveryAddress:
                  $ref: "#/components/schemas/DeliveryAddress"
      responses:
        "200":
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product added to cart successfully
                  cart:
                    $ref: "#/components/schemas/CartItem"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal server error

  /cart:
    get:
      tags:
        - Cart
      security:
        - bearerAuth: []
      summary: Get the current user's cart
      description: Retrieve the cart for the authenticated user, including all items and price details.
      responses:
        "200":
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            productId:
                              type: string
                              description: The ID of the product or food item
                              example: 66fc32743be26b54e9be9085
                            quantity:
                              type: integer
                              description: Quantity of the item in the cart
                              example: 2
                            selectedSize:
                              type: string
                              description: Size of the product (if applicable)
                              example: M
                            selectedColor:
                              type: string
                              description: Color of the product (if applicable)
                              example: Red
                            price:
                              type: number
                              description: The price of the item
                              example: 10.99
                      subtotal:
                        type: number
                        description: Subtotal for the cart (before tax and delivery charge)
                        example: 54.95
                      tax:
                        type: number
                        description: Tax applied to the cart
                        example: 2.7475
                      deliveryCharge:
                        type: number
                        description: Delivery charge applied to the cart
                        example: 5
                      totalPrice:
                        type: number
                        description: Total price of the cart (subtotal + tax + delivery charge)
                        example: 62.6975
                      deliveryAddress:
                        $ref: "#/components/schemas/DeliveryAddress"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Cart not found
        "500":
          description: Internal server error

  /cart/remove:
    delete:
      tags:
        - Cart
      security:
        - bearerAuth: []
      summary: Remove an item from the cart
      requestBody:
        description: The data required to remove an item from the cart
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: The ID of the product to remove
                  example: 66fc32743be26b54e9be9085
      responses:
        "200":
          description: Item removed from cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product removed from cart successfully
                  cart:
                    type: object
                    example: null
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Item not found in cart
        "500":
          description: Internal server error

  /cart/update:
    patch:
      tags:
        - Cart
      security:
        - bearerAuth: []
      summary: Update the quantity of an item in the cart
      requestBody:
        description: The data required to update the quantity of an item in the cart
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: The ID of the product or food item
                  example: 66fc32743be26b54e9be9085
                quantity:
                  type: integer
                  description: The new quantity for the item
                  example: 3
      responses:
        "200":
          description: Item quantity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Cart item updated successfully
                  cart:
                    $ref: "#/components/schemas/CartItem"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Item not found in cart
        "500":
          description: Internal server error

  /cart/clear:
    delete:
      tags:
        - Cart
      security:
        - bearerAuth: []
      summary: Clear all items from the cart
      responses:
        "200":
          description: Cart cleared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Cart cleared successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal server error

  # Partner
  /partner/auth/register:
    post:
      summary: Register a new partner
      tags:
        - Partner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                countryCode:
                  type: string
                  example: "+91"
                phone:
                  type: string
                password:
                  type: string
                confirmPassword:
                  type: string
                type:
                  type: string
                  example: partner
                businessType:
                  type: string
                  example: business_type_Id
                  description: The ID of the business type selected by the partner (ObjectId format)
              required:
                - name
                - email
                - phone
                - password
                - type
                - businessType
      security:
        - basicAuth: []
      responses:
        "200":
          description: Partner registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        "400":
          $ref: "#/components/responses/DuplicateEmail"

  /partner/auth/verify-mobile-otp:
    post:
      summary: Verify mobile OTP for a Partner
      tags:
        - Partner
      security:
        - basicAuth: [] # Use Basic Auth for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyOtpRequestUser"
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "OTP verified successfully"
        "400":
          description: Invalid OTP or request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"

  /partner/auth/verify-email-otp:
    post:
      summary: Verify email OTP for a partner
      tags:
        - Partner
      security:
        - basicAuth: [] # Use Basic Auth for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyOtpRequestUser"
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "OTP verified successfully"
        "400":
          description: Invalid OTP or request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"

  /partner/auth/login:
    post:
      summary: Partner login with email or phone and password
      tags:
        - Partner
      security:
        - basicAuth: [] # Use Basic Auth for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrPhone:
                  type: string
                password:
                  type: string
                type:
                  type: string
                  example: partner
                  enum:
                    - user
                    - partner
              required:
                - emailOrPhone
                - password
                - type
      responses:
        "200":
          description: Partner logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /partner/auth/logout:
    post:
      summary: Partner logout
      tags:
        - Partner
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: The refresh token to be invalidated
              required:
                - refreshToken
      responses:
        "200":
          description: Partner logged out successfully
        "401":
          $ref: "#/components/responses/Unauthorized"

  /partner/auth/forgot-password:
    post:
      summary: Send forgot password otp to partner's email/phone
      tags:
        - Partner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrPhone:
                  type: string
                  format: email
                type:
                  type: string
                  enum:
                    - partner
              required:
                - emailOrPhone
                - type
      security:
        - basicAuth: []
      responses:
        "200":
          description: Reset password link sent successfully
        "404":
          $ref: "#/components/responses/NotFound"

  /partner/auth/reset-password:
    post:
      summary: Reset password using the provided token
      tags:
        - Partner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Reset password token
                newPassword:
                  type: string
              required:
                - token
                - newPassword
      security:
        - basicAuth: []
      responses:
        "200":
          description: Password reset successfully
        "400":
          description: Invalid token or new password
        "404":
          $ref: "#/components/responses/NotFound"

  /partner/auth/resend-otp:
    post:
      summary: Resend OTP for partner
      tags:
        - Partner
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResendOtpRequest"
      responses:
        "200":
          description: OTP resent successfully
        "400":
          description: Invalid request data
        "404":
          $ref: "#/components/responses/NotFound"

  /partner/change-password:
    post:
      summary: Partner change password
      tags:
        - Partner
      security:
        - bearerAuth: [] # Bearer token required for this route
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Password changed successfully"
        "400":
          $ref: "#/components/responses/PasswordMismatch"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/InvalidCurrentPassword"

  # Update email
  /partner/update-email:
    patch:
      summary: Update partner's email directly
      tags:
        - Partner
      security:
        - basicAuth: [] # Use Basic Auth for authenticated routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The ID of the partner/user
                email:
                  type: string
                  format: email
              required:
                - email
                - userId
      responses:
        "200":
          description: Email updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Email updated successfully"
        "400":
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  # Update phone
  /partner/update-phone:
    patch:
      summary: Update partner's phone directly
      tags:
        - Partner
      security:
        - basicAuth: [] # Use Basic Auth for authenticated routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The ID of the partner/user
                phone:
                  type: string
              required:
                - phone
                - userId
      responses:
        "200":
          description: Phone number updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Phone number updated successfully"
        "400":
          description: Invalid phone number
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /partner/profile/{id}:
    get:
      summary: Get partner profile by ID
      tags:
        - Partner
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the partner to retrieve
          schema:
            type: string
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Partner profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update partner profile
      tags:
        - Partner
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the partner to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the partner
                email:
                  type: string
                  format: email
                  description: Email address of the partner
                phone:
                  type: string
                  description: Phone number of the partner
                bio:
                  type: string
                  description: Short bio or description of the partner
                businessName:
                  type: string
                socialMediaLinks[]:
                  type: array
                  items:
                    type: string
                    description: Social media link
                  description: Array of up to 5 social media links (e.g., Facebook, Instagram)
                profilePhoto:
                  type: string
                  format: binary
                  description: Profile photo image file
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Partner profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid input data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  # About Us
  /partner/auth/{id}/about-us:
    patch:
      summary: Add or Update Partner's About Us
      tags:
        - Partner
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the partner to add/update about us
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
      responses:
        "200":
          description: About Us information updated successfully
        "400":
          description: Invalid input data
        "404":
          description: Partner not found

    get:
      summary: Get Partner's about us by ID
      tags:
        - Partner
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Partner's About Us retrieved successfully
        "404":
          description: Partner not found

  # Dine-Out-Partner
  /dine-out/request/{requestId}:
    get:
      summary: Get DineOut requests details by ID
      tags:
        - DineOut (Partner)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: requestId
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{24}$"
          required: true
          description: The ID of the request
      responses:
        "200":
          description: dine-out requests of the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DineOutRequest"
        "403":
          description: Not authorized to update this request
        "404":
          description: DineOut request not found

  /dine-out/business/{businessId}:
    get:
      summary: Get all DineOut requests for a business
      tags:
        - DineOut (Partner)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: businessId
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{24}$"
          required: true
          description: The ID of the business
      responses:
        "200":
          description: List of dine-out requests for the business
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DineOutRequest"
        "404":
          description: No dine-out requests found for this business

  /dine-out/confirm/{requestId}:
    patch:
      summary: Update DineOut request status (Accept/Reject)
      tags:
        - DineOut (Partner)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: requestId
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{24}$"
          required: true
          description: The ID of the dine-out request to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [Accepted, Rejected]
                  description: The new status of the request
                  example: "Accepted"
      responses:
        "200":
          description: DineOut request status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Dine-out request accepted"
                  businessDetails:
                    type: object
                    properties:
                      businessName:
                        type: string
                        example: "Starbucks"
                      address:
                        type: string
                        example: "123 Business St, New York, USA"
                      openingDays:
                        type: array
                        items:
                          type: string
                        example:
                          - "Monday"
                          - "Friday"
                          - "Wednesday"
                      openingTime:
                        type: string
                        example: "09:00 AM"
                      closingTime:
                        type: string
                        example: "07:00 PM"
                  dineOutRequest:
                    $ref: "#/components/schemas/DineOutRequest"
        "403":
          description: Not authorized to update this request
        "404":
          description: DineOut request not found

  #Items
  /items/create:
    post:
      summary: Create a new item (Food, Room, or Product)
      tags:
        - Partner Items
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                itemType:
                  type: string
                  description: The type of the item (food, room, product)
                  enum:
                    - food
                    - room
                    - product
                  example: food
                businessId:
                  type: string
                  description: The ID of the associated business (ObjectId)
                  example: 60d0fe4f5311236168a109ca
                businessTypeId:
                  type: string
                  description: The ID of the associated business type (ObjectId)
                  example: 66db3c19490360a26a552adb
                available:
                  type: boolean
                  description: Availability status of the item
                  default: true
                # Fields for food items
                dishName:
                  type: string
                  description: Name of the dish (food items only)
                  example: Pizza
                dishDescription:
                  type: string
                  description: Description of the dish (food items only)
                  example: "Delicious pizza with extra cheese"
                dishPrice:
                  type: number
                  description: Price of the dish (food items only)
                  example: 10.99
                dineInStatus:
                  type: boolean
                  description: Toggle for dine-in availability (food items only)
                  default: false
                operatingDetails[0][date]:
                  type: string
                  description: The date of operation (for food items)
                  example: "2024-10-01"
                operatingDetails[0][startTime]:
                  type: string
                  description: Start time for the food item operation
                  example: "10:00 AM"
                operatingDetails[0][endTime]:
                  type: string
                  description: End time for the food item operation
                  example: "10:00 PM"
                tableManagement[0][tableNumber]:
                  type: string
                  description: Table number for food item (dine-in only)
                  example: "Table 1"
                tableManagement[0][seatingCapacity]:
                  type: number
                  description: Seating capacity for the table
                  example: 4

                # Fields for room items
                roomName:
                  type: string
                  description: Name of the room (room items only)
                  example: "Deluxe Room"
                roomType:
                  type: string
                  description: Type of the room (room items only)
                  example: "Suite"
                roomDescription:
                  type: string
                  description: Description of the room (room items only)
                  example: "Spacious room with sea view"
                roomPrice:
                  type: number
                  description: Price of the room (room items only)
                  example: 150
                roomTax:
                  type: number
                  description: Tax applicable for the room (room items only)
                  example: 20
                checkIn:
                  type: string
                  description: Check-in time (room items only)
                  example: "2:00 PM"
                checkOut:
                  type: string
                  description: Check-out time (room items only)
                  example: "11:00 AM"
                # Amenities as a flattened array
                amenities[0]:
                  type: string
                  description: First amenity
                  example: "WiFi"
                amenities[1]:
                  type: string
                  description: Second amenity
                  example: "Air Conditioning"
                amenities[2]:
                  type: string
                  description: Third amenity
                  example: "Pool"

                # Fields for product items
                productName:
                  type: string
                  description: Name of the product (product items only)
                  example: "T-Shirt"
                productCategory:
                  type: string
                  description: Category of the product (product items only)
                  example: "Clothing"
                productDescription:
                  type: string
                  description: Description of the product (product items only)
                  example: "Comfortable cotton t-shirt"
                productPrice:
                  type: number
                  description: Price of the product (product items only)
                  example: 25.99
                variants[0][variantName]:
                  type: string
                  description: Name of the variant (e.g., Small, Medium, Large)
                  example: "Medium"
                variants[0][size]:
                  type: string
                  description: Size of the variant
                  example: "M"
                variants[0][color]:
                  type: string
                  description: Color of the variant
                  example: "Red"
                variants[0][productPrice]:
                  type: number
                  description: Price of the variant
                  example: 29.99
                variants[0][nonReturnable]:
                  type: boolean
                  description: Indicates if the variant is non-returnable
                  default: false
                variants[1][variantName]:
                  type: string
                  description: Name of the second variant (e.g., Large)
                  example: "Large"
                variants[1][size]:
                  type: string
                  description: Size of the second variant
                  example: "L"
                variants[1][color]:
                  type: string
                  description: Color of the second variant
                  example: "Blue"
                variants[1][productPrice]:
                  type: number
                  description: Price of the second variant
                  example: 35.99
                variants[1][nonReturnable]:
                  type: boolean
                  description: Indicates if the second variant is non-returnable
                  default: true

                # Image upload
                images:
                  type: array
                  description: Images for the item
                  items:
                    type: string
                    format: binary
                  example: []

      responses:
        "201":
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        "400":
          description: Invalid request data
      security:
        - bearerAuth: []

  /items/{itemId}:
    get:
      summary: Get an item by its ID
      tags:
        - Partner Items
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the item to retrieve
      responses:
        "200":
          description: Item retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        "404":
          description: Item not found
      security:
        - bearerAuth: []

    patch:
      summary: Update an item by its ID
      tags:
        - Partner Items
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the item to update
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                itemType:
                  type: string
                  description: The type of the item (food, room, product)
                  enum:
                    - food
                    - room
                    - product
                  example: food
                businessId:
                  type: string
                  description: The ID of the associated business (ObjectId)
                  example: 60d0fe4f5311236168a109ca
                businessTypeId:
                  type: string
                  description: The ID of the associated business type (ObjectId)
                  example: 66db3c19490360a26a552adb
                available:
                  type: boolean
                  description: Availability status of the item
                  default: true
                # Fields for food items
                dishName:
                  type: string
                  description: Name of the dish (food items only)
                  example: Pizza
                dishDescription:
                  type: string
                  description: Description of the dish (food items only)
                  example: "Delicious pizza with extra cheese"
                dishPrice:
                  type: number
                  description: Price of the dish (food items only)
                  example: 10.99
                dineInStatus:
                  type: boolean
                  description: Toggle for dine-in availability (food items only)
                  default: false
                operatingDetails[0][date]:
                  type: string
                  description: The date of operation (for food items)
                  example: "2024-10-01"
                operatingDetails[0][startTime]:
                  type: string
                  description: Start time for the food item operation
                  example: "10:00 AM"
                operatingDetails[0][endTime]:
                  type: string
                  description: End time for the food item operation
                  example: "10:00 PM"
                tableManagement[0][tableNumber]:
                  type: string
                  description: Table number for food item (dine-in only)
                  example: "Table 1"
                tableManagement[0][seatingCapacity]:
                  type: number
                  description: Seating capacity for the table
                  example: 4

                # Fields for room items
                roomName:
                  type: string
                  description: Name of the room (room items only)
                  example: "Deluxe Room"
                roomType:
                  type: string
                  description: Type of the room (room items only)
                  example: "Suite"
                roomDescription:
                  type: string
                  description: Description of the room (room items only)
                  example: "Spacious room with sea view"
                roomPrice:
                  type: number
                  description: Price of the room (room items only)
                  example: 150
                roomTax:
                  type: number
                  description: Tax applicable for the room (room items only)
                  example: 20
                checkIn:
                  type: string
                  description: Check-in time (room items only)
                  example: "2:00 PM"
                checkOut:
                  type: string
                  description: Check-out time (room items only)
                  example: "11:00 AM"
                # Amenities as a flattened array
                amenities[0]:
                  type: string
                  description: First amenity
                  example: "WiFi"
                amenities[1]:
                  type: string
                  description: Second amenity
                  example: "Air Conditioning"
                amenities[2]:
                  type: string
                  description: Third amenity
                  example: "Pool"

                # Fields for product items
                productName:
                  type: string
                  description: Name of the product (product items only)
                  example: "T-Shirt"
                productCategory:
                  type: string
                  description: Category of the product (product items only)
                  example: "Clothing"
                productDescription:
                  type: string
                  description: Description of the product (product items only)
                  example: "Comfortable cotton t-shirt"
                productPrice:
                  type: number
                  description: Price of the product (product items only)
                  example: 25.99
                variants[0][variantName]:
                  type: string
                  description: Name of the variant (e.g., Small, Medium, Large)
                  example: "Medium"
                variants[0][size]:
                  type: string
                  description: Size of the variant
                  example: "M"
                variants[0][color]:
                  type: string
                  description: Color of the variant
                  example: "Red"
                variants[0][productPrice]:
                  type: number
                  description: Price of the variant
                  example: 29.99
                variants[0][nonReturnable]:
                  type: boolean
                  description: Indicates if the variant is non-returnable
                  default: false
                variants[1][variantName]:
                  type: string
                  description: Name of the second variant (e.g., Large)
                  example: "Large"
                variants[1][size]:
                  type: string
                  description: Size of the second variant
                  example: "L"
                variants[1][color]:
                  type: string
                  description: Color of the second variant
                  example: "Blue"
                variants[1][productPrice]:
                  type: number
                  description: Price of the second variant
                  example: 35.99
                variants[1][nonReturnable]:
                  type: boolean
                  description: Indicates if the second variant is non-returnable
                  default: true

                # Image upload
                images:
                  type: array
                  description: Images for the item
                  items:
                    type: string
                    format: binary
                  example: []

      responses:
        "200":
          description: Item updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        "400":
          description: Invalid request data
        "404":
          description: Item not found
      security:
        - bearerAuth: []

    delete:
      summary: Delete an item by its ID
      tags:
        - Partner Items
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the item to delete
      responses:
        "200":
          description: Item deleted successfully
        "404":
          description: Item not found
      security:
        - bearerAuth: []

  /items/business/{businessId}:
    get:
      summary: Get items by business ID
      tags:
        - Partner Items
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the business to retrieve items for
      responses:
        "200":
          description: List of items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Items"
        "404":
          description: Business not found
      security:
        - bearerAuth: []

  /items/business-type/{businessTypeId}:
    get:
      summary: Get items by business type ID
      tags:
        - Partner Items
      parameters:
        - name: businessTypeId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the business type to retrieve items for
      responses:
        "200":
          description: List of items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Items"
        "404":
          description: Business Type not found
      security:
        - bearerAuth: []

  # Partner Business
  /business:
    post:
      summary: Create a new business - Require Partner's Authentication
      tags:
        - Partner Business
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                businessName:
                  type: string
                  description: Name of the business
                  example: "My Awesome Business"
                businessType:
                  type: string
                  description: The ObjectId of the business type
                  example: "66db3c19490360a26a552adb"
                businessDescription:
                  type: string
                  description: A brief description of the business
                  example: "We provide high-quality services and offer a wide range of services and products for our customers."
                countryCode:
                  type: string
                  example: "+91"
                mobile:
                  type: string
                  description: Business mobile number
                  example: "1234567890"
                email:
                  type: string
                  description: Business email address
                  example: "business@example.com"
                businessAddress[street]:
                  type: string
                  description: Street address of the business
                  example: "123 Business St"
                businessAddress[city]:
                  type: string
                  description: City where the business is located
                  example: "City"
                businessAddress[state]:
                  type: string
                  description: State where the business is located
                  example: "State"
                businessAddress[country]:
                  type: string
                  description: Country where the business is located
                  example: "Country"
                businessAddress[postalCode]:
                  type: string
                  description: Postal code of the business location
                  example: "12345"
                businessAddress[latitude]:
                  type: number
                  description: Latitude of the business location
                  example: 28.6139
                businessAddress[longitude]:
                  type: number
                  description: Longitude of the business location
                  example: 77.2090
                businessAddress[location][type]:
                  type: string
                  description: GeoJSON type for the location (should be "Point")
                  example: "Point"
                businessAddress[location][coordinates][0]:
                  type: number
                  description: Longitude for the business location
                  example: 77.2090
                businessAddress[location][coordinates][1]:
                  type: number
                  description: Latitude for the business location
                  example: 28.6139
                openingTime:
                  type: string
                  description: If the sameTimeForAllDays is true
                  example: "09:00 AM"
                closingTime:
                  type: string
                  description: If the sameTimeForAllDays is true
                  example: "06:00 PM"
                openingDays[]:
                  type: array
                  description: Days of the week when the business is open
                  items:
                    type: string
                  example: ["Monday", "Tuesday", "Wednesday"]
                sameTimeForAllDays:
                  type: boolean
                  description: Indicates if the same opening and closing times apply for all days
                  example: false
                uniformTiming[openingTime]:
                  type: string
                  description: The opening time for the business
                  example: "09:00 AM"
                uniformTiming[closingTime]:
                  type: string
                  description: The closing time for the business
                  example: "06:00 PM"
                daywiseTimings[0][day]:
                  type: string
                  description: Day of the week
                  example: "Monday"
                daywiseTimings[0][openingTime]:
                  type: string
                  description: Opening time for this day
                  example: "09:00 AM"
                daywiseTimings[0][closingTime]:
                  type: string
                  description: Closing time for this day
                  example: "06:00 PM"
                bannerImages:
                  type: array
                  description: List of banner images to upload
                  items:
                    type: string
                    format: binary
                    description: Binary banner image files for the business
                    example: "banner1.jpg"

                galleryImages:
                  type: array
                  description: List of gallery images to upload
                  items:
                    type: string
                    format: binary
                    description: Binary gallery image files for the business
                    example: "gallery1.jpg"
      responses:
        "201":
          description: Business created successfully
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"

  /business/{id}:
    get:
      summary: Get business by business ID
      tags:
        - Partner Business
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Business ID
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Business found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartnerBusiness"
        "404":
          description: Business not found
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update a business by ID
      tags:
        - Partner Business
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the business to update
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                businessName:
                  type: string
                  description: Name of the business
                  example: "My Awesome Business"
                businessType:
                  type: string
                  description: The ObjectId of the business type
                  example: "66db3c19490360a26a552adb"
                businessDescription:
                  type: string
                  description: A brief description of the business
                  example: "We provide high-quality services and offer a wide range of services and products for our customers."
                countryCode:
                  type: string
                  example: "+91"
                mobile:
                  type: string
                  description: Business mobile number
                  example: "1234567890"
                email:
                  type: string
                  description: Business email address
                  example: "business@example.com"
                businessAddress[street]:
                  type: string
                  description: Street address of the business
                  example: "123 Business St"
                businessAddress[city]:
                  type: string
                  description: City where the business is located
                  example: "City"
                businessAddress[state]:
                  type: string
                  description: State where the business is located
                  example: "State"
                businessAddress[country]:
                  type: string
                  description: Country where the business is located
                  example: "Country"
                businessAddress[postalCode]:
                  type: string
                  description: Postal code of the business location
                  example: "12345"
                businessAddress[latitude]:
                  type: number
                  description: Latitude of the business location
                  example: 28.6139
                businessAddress[longitude]:
                  type: number
                  description: Longitude of the business location
                  example: 77.2090
                businessAddress[location][type]:
                  type: string
                  description: GeoJSON type for the location (should be "Point")
                  example: "Point"
                businessAddress[location][coordinates][0]:
                  type: number
                  description: Longitude for the business location
                  example: 77.2090
                businessAddress[location][coordinates][1]:
                  type: number
                  description: Latitude for the business location
                  example: 28.6139
                openingTime:
                  type: string
                  description: If the sameTimeForAllDays is true
                  example: "09:00 AM"
                closingTime:
                  type: string
                  description: If the sameTimeForAllDays is true
                  example: "06:00 PM"
                openingDays[]:
                  type: array
                  description: Days of the week when the business is open
                  items:
                    type: string
                  example: ["Monday", "Tuesday", "Wednesday"]
                sameTimeForAllDays:
                  type: boolean
                  description: Indicates if the same opening and closing times apply for all days
                  example: false
                uniformTiming[openingTime]:
                  type: string
                  description: The opening time for the business
                  example: "09:00 AM"
                uniformTiming[closingTime]:
                  type: string
                  description: The closing time for the business
                  example: "06:00 PM"
                daywiseTimings[0][day]:
                  type: string
                  description: Day of the week
                  example: "Monday"
                daywiseTimings[0][openingTime]:
                  type: string
                  description: Opening time for this day
                  example: "09:00 AM"
                daywiseTimings[0][closingTime]:
                  type: string
                  description: Closing time for this day
                  example: "06:00 PM"
                bannerImages:
                  type: array
                  description: List of banner images to upload
                  items:
                    type: string
                    format: binary
                    description: Binary banner image files for the business
                    example: "banner1.jpg"

                galleryImages:
                  type: array
                  description: List of gallery images to upload
                  items:
                    type: string
                    format: binary
                    description: Binary gallery image files for the business
                    example: "gallery1.jpg"
      responses:
        "200":
          description: Business updated successfully
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    delete:
      summary: Delete a business
      tags:
        - Partner Business
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the business to delete
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "200":
          description: Business deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /business/partner/{partnerId}:
    get:
      summary: Get business by partner's ID
      tags:
        - Partner Business
      parameters:
        - name: partnerId
          in: path
          required: true
          schema:
            type: string
          description: Partner's ID
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Business found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartnerBusiness"
        "404":
          description: Business not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /business/near:
    get:
      summary: Get Near By Businesses
      tags:
        - Partner Business
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: latitude
          required: true
          schema:
            type: number
            format: float
            example: 40.7128
        - in: query
          name: longitude
          required: true
          schema:
            type: number
            format: float
            example: -74.0060
        - in: query
          name: radiusInKm
          required: true
          schema:
            type: number
            format: float
            example: 10
          description: The search radius in kilometers
      responses:
        "200":
          description: A list of nearby businesses
        "400":
          description: Invalid latitude, longitude, or radius input
        "404":
          description: No businesses found nearby

  # Post
  /posts:
    post:
      summary: Create a new post
      tags:
        - Post
      security:
        - bearerAuth: [] # Bearer token required for this route
      requestBody:
        required: true
        content:
          multipart/form-data: # Use multipart/form-data for file uploads
            schema:
              type: object
              properties:
                caption:
                  type: string
                  description: Caption of the post
                images:
                  type: array
                  items:
                    type: string
                    format: binary # For file uploads (images)
                  description: Array of image files
      responses:
        "201":
          description: Post created successfully
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"

    get:
      summary: Get list of all posts
      tags:
        - Post
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "200":
          description: List of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /posts/{id}:
    get:
      summary: Get post by ID
      tags:
        - Post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Post ID
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Post found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Post not found
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update a post by ID
      tags:
        - Post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the post to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "200":
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    delete:
      summary: Delete a post
      tags:
        - Post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the post to delete
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "200":
          description: Post deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  # FAQ
  /faq:
    get:
      summary: Get a list of FAQs (Admin)
      tags:
        - FAQ (Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: sortBy
          in: query
          required: false
          description: Sort order (asc/desc)
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: limit
          in: query
          required: false
          description: Number of FAQs per page
          schema:
            type: integer
            default: 10
        - name: searchBy
          in: query
          required: false
          description: Keyword to search by question or answer
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: Filter by FAQ status
          schema:
            type: string
            enum: [active, inactive]
      responses:
        "200":
          description: List of FAQs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FAQ"
        "400":
          description: Invalid query parameters
        "401":
          $ref: "#/components/responses/Unauthorized"

    post:
      summary: Create a new FAQ (Admin)
      tags:
        - FAQ (Admin)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: The question of the FAQ
                answer:
                  type: string
                  description: The answer to the FAQ
                status:
                  type: string
                  enum: [active, inactive]
                  description: Status of the FAQ
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "201":
          description: FAQ created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FAQ"
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"

  /faq/{id}:
    get:
      summary: Get FAQ by ID (Admin)
      tags:
        - FAQ (Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the FAQ to retrieve
          schema:
            type: string
      responses:
        "200":
          description: FAQ retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FAQ"
        "404":
          description: FAQ not found
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update FAQ by ID (Admin)
      tags:
        - FAQ (Admin)
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the FAQ to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                answer:
                  type: string
                status:
                  type: string
                  enum: [active, inactive]
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: FAQ updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FAQ"
        "400":
          description: Invalid input
        "404":
          description: FAQ not found
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      summary: Delete FAQ by ID (Admin)
      tags:
        - FAQ (Admin)
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the FAQ to delete
          schema:
            type: string
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "204":
          description: FAQ deleted successfully
        "404":
          description: FAQ not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /faq/for/user:
    get:
      summary: Get a list of FAQs (User)
      tags:
        - FAQ (User)
      security:
        - basicAuth: []
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: sortBy
          in: query
          required: false
          description: Sort order (asc/desc)
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: for
          in: query
          required: false
          description: FAQ for (user or vendor) 0 For User, 1 For Vendor, and 2 For Both
          schema:
            type: string
            enum: [0, 1, 2]
            default: 0
        - name: limit
          in: query
          required: false
          description: Number of FAQs per page
          schema:
            type: integer
            default: 10
        - name: searchBy
          in: query
          required: false
          description: Keyword to search by question or answer
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: Filter by FAQ status (only "active" for users)
          schema:
            type: string
            enum: [active]
            default: active
      responses:
        "200":
          description: List of FAQs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FAQ"
        "400":
          description: Invalid query parameters

  /static-content/for/admin:
    get:
      summary: Get a list of static content (Admin)
      tags:
        - Static Content (Admin)
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: sortBy
          in: query
          required: false
          description: Sort order (asc/desc)
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: limit
          in: query
          required: false
          description: Number of items per page
          schema:
            type: integer
            default: 10
        - name: searchBy
          in: query
          required: false
          description: Search keyword to filter static content by title or content
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: Filter by status of the content
          schema:
            type: string
            enum: [active, inactive]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of static content retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StaticContent"
        "400":
          description: Invalid query parameters
        "401":
          $ref: "#/components/responses/Unauthorized"

  /static-content/for/admin/terms:
    get:
      summary: Get Terms and Conditions (Admin)
      tags:
        - Static Content (Admin)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Terms and Conditions content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticContent"
        "404":
          description: Terms and Conditions content not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /static-content/for/admin/refund-policy:
    get:
      summary: Get Refund Policy (Admin)
      tags:
        - Static Content (Admin)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Refund Policy content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticContent"
        "404":
          description: Refund Policy content not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /static-content/for/admin/shipping-policy:
    get:
      summary: Get Shipping Policy (Admin)
      tags:
        - Static Content (Admin)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Shipping Policy content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticContent"
        "404":
          description: Shipping Policy content not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /static-content/for/admin/privacy:
    get:
      summary: Get Privacy Policy (Admin)
      tags:
        - Static Content (Admin)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Privacy Policy content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticContent"
        "404":
          description: Privacy Policy content not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /static-content/for-user/terms:
    get:
      summary: Get Terms and Conditions (User)
      tags:
        - Static Content (User)
      security:
        - basicAuth: []
      responses:
        "200":
          description: Terms and Conditions content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticContent"
        "404":
          description: Terms and Conditions content not found

  /static-content/for-user/refund-policy:
    get:
      summary: Get Refund Policy (User)
      tags:
        - Static Content (User)
      security:
        - basicAuth: []
      responses:
        "200":
          description: Refund Policy content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticContent"
        "404":
          description: Refund Policy content not found

  /static-content/for-user/shipping-policy:
    get:
      summary: Get Shipping Policy (User)
      tags:
        - Static Content (User)
      security:
        - basicAuth: []
      responses:
        "200":
          description: Shipping Policy content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticContent"
        "404":
          description: Shipping Policy content not found

  /static-content/for-user/privacy:
    get:
      summary: Get Privacy Policy (User)
      tags:
        - Static Content (User)
      security:
        - basicAuth: []
      responses:
        "200":
          description: Privacy Policy content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticContent"
        "404":
          description: Privacy Policy content not found

  /static-content/for-user/2/about-us:
    get:
      summary: Get Refund Policy (User)
      tags:
        - Static Content (User)
      security:
        - basicAuth: []
      responses:
        "200":
          description: Refund Policy content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticContent"
        "404":
          description: Refund Policy content not found

  # Contact US
  /contact-us:
    get:
      summary: Get all list
      tags:
        - Contact Us
      security:
        - bearerAuth: [] # Admin Bearer token required for this route
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order for contact us (asc or desc)
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Limit number of results per page
        - name: searchBy
          in: query
          required: false
          schema:
            type: string
          description: Search contact us by name or any specific field
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [1, 0]
          description: Filter by status (active or inactive)
      responses:
        "200":
          description: List of contact us
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    post:
      summary: Post a contact
      tags:
        - Contact Us
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                subject:
                  type: string
                message:
                  type: string
              required:
                - firstName
                - lastName
                - email
                - message
      security:
        - basicAuth: []
      responses:
        "200":
          description: Successfully Post Contact
        "404":
          $ref: "#/components/responses/NotFound"

  /contact-us/{id}:
    get:
      summary: Get details of a specific contact
      tags:
        - Contact Us
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the contact to retrieve
      security:
        - bearerAuth: [] # Admin Bearer token required for this route
      responses:
        "200":
          description: Contact Us details
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update Contact
      tags:
        - Contact Us
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the Contact to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                subject:
                  type: string
                message:
                  type: string
      security:
        - bearerAuth: [] # Admin Bearer Token for authenticated routes
      responses:
        "200":
          description: Contact updated successfully
        "400":
          description: Invalid input
        "404":
          description: Contact not found
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      summary: Delete a contact
      tags:
        - Contact Us
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the contact to delete
      security:
        - bearerAuth: [] # Admin Bearer token required for this route
      responses:
        "200":
          description: Contact deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  # Other routes can be updated similarly for User and Partner with appropriate security mechanisms
