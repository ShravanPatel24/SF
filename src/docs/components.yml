components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: Basic authentication for login requests
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token for authenticated routes

  schemas:
    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

    AuthTokens:
      type: object
      properties:
        access:
          $ref: "#/components/schemas/Token"
        refresh:
          $ref: "#/components/schemas/Token"
      example:
        access:
          token: "newAccessToken123"
          expires: "2024-12-31T23:59:59Z"
        refresh:
          token: "newRefreshToken123"
          expires: "2024-12-31T23:59:59Z"

    BusinessType:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the business type
        name:
          type: string
          description: Name of the business type
        status:
          type: string
          enum: [1, 0]
          description: Status of the business type (1 for active, 0 for inactive)
        image:
          type: string
          format: binary
          description: Image file for the business type
      example:
        id: "613b6f7a84d1b7f2b09467c5"
        name: "Retail"
        status: "1"

    AdminStaff:
      type: object
      properties:
        name:
          type: string
          description: Name of the admin staff
          example: "John Doe"
        email:
          type: string
          description: Email of the admin staff
          example: "johndoe@example.com"
        phone:
          type: string
          description: Phone number of the admin staff
          example: "1234567890"
        password:
          type: string
          description: Password of the admin staff
          example: "string"
        countryCode:
          type: string
          description: Country code of the admin staff
          example: "+1"
        role:
          type: string
          description: Role ID assigned to the admin staff
          example: "60d0fe4f5311236168a109cb"

    responses:
      Unauthorized:
        description: Authentication information is missing or invalid.
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Unauthorized"
      Duplicate:
        description: The admin staff already exists.
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Duplicate entry"
    securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT

    Role:
      type: object
      properties:
        name:
          type: string
          description: Name of the role
          example: "Manager"
        resource:
          type: array
          description: List of resources with permissions for the role
          items:
            type: object
            properties:
              moduleName:
                type: string
                description: The name of the module
                example: "User Management"
              moduleId:
                type: string
                description: Unique module identifier
                example: "user_mgmt"
              permissions:
                type: array
                description: Permissions assigned to the role for this resource
                items:
                  type: string
                  enum: ["add", "edit", "delete", "view"]
                  example: "view"

    Template:
      type: object
      properties:
        templateName:
          type: string
          example: "Account Activation"
        subject:
          type: string
          example: "Activate Your Account"
        fromName:
          type: string
          example: "Ocean Support"
        fromEmail:
          type: string
          example: "support@ocean.com"
        templateFor:
          type: string
          example: "account-activation"
        templateType:
          type: integer
          example: 0
        templateDisc:
          type: string
          example: "<p>Hello {userName},</p><p>Click the link below to activate your account:</p><p>{activationLink}</p>"
        status:
          type: integer
          example: 1
        isDelete:
          type: integer
          example: 1
        createdAt:
          type: string
          format: date-time
          example: "2024-10-30T10:10:10.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-10-30T10:10:10.000Z"
        id:
          type: string
          example: "template_id_generated"

    ChangePasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
          description: The current password of the user
        password:
          type: string
          description: The new password
      required:
        - currentPassword
        - password
      example:
        oldPassword: "oldPassword123"
        password: "newPassword123"

    VerifyOtpRequestAdmin:
      type: object
      required:
        - email
        - otp
      properties:
        email:
          type: string
        otp:
          type: number
          description: "The one-time password (OTP) for verification"

    VerifyOtpRequestUser:
      type: object
      required:
        - id
        - otp
      properties:
        id:
          type: string
          description: "The user's unique ID (must be a valid MongoDB ObjectId)"
          pattern: "^[a-fA-F0-9]{24}$" # Regex pattern for MongoDB ObjectId
        otp:
          type: number
          description: "The one-time password (OTP) for verification"

    ResendOtpRequest:
      type: object
      required:
        - userId
        - otpType
      properties:
        userId:
          type: string
          description: "The user's unique ID (must be a valid MongoDB ObjectId)"
          pattern: "^[a-fA-F0-9]{24}$" # Regex pattern for MongoDB ObjectId
        otpType:
          type: string
          description: "The OTP type to resend. Possible values are 'email' and 'passwordReset'."
          enum:
            - email
            - passwordReset
          example: email/passwordReset

    UserProfile:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the user
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        bio:
          type: string
          description: Short bio or description of the user
        socialMediaLinks:
          type: array
          items:
            type: string
            format: uri
          maxItems: 5
          description: Array of up to 5 social media links (e.g., Facebook, Instagram)
        profilePhoto:
          type: string
          format: binary
          description: URL of the user's profilePhoto image
        followersCount:
          type: integer
          description: Number of followers the user has
        followingCount:
          type: integer
          description: Number of users the user is following
      required:
        - id
        - name
        - email
        - phone
        - bio
      example:
        id: "user123"
        name: "John Doe"
        email: "johndoe@example.com"
        phone: "+1234567890"
        bio: "This is a short bio about John Doe."
        profilePhoto: "/images/profile/johndoe.jpg"

    CartItem:
      type: object
      properties:
        productId:
          type: string
          description: The ID of the product or food item
          example: 66fc32743be26b54e9be9085
        quantity:
          type: integer
          description: Quantity of the item to add to the cart
          example: 2
        selectedSize:
          type: string
          description: Size of the item (if applicable)
          example: M
        selectedColor:
          type: string
          description: Color of the item (if applicable)
          example: Red
        price:
          type: number
          description: The price of the item
          example: 10.99

    Order:
      type: object
      properties:
        orderId:
          type: string
          description: The custom order ID
          example: 1697055785
        orderNumber:
          type: string
          description: The custom order number
          example: "#1697055785"
        status:
          type: string
          description: The status of the order
          example: processing
        paymentMethod:
          type: string
          description: The payment method used
          example: cash
        deliveryAddress:
          $ref: "#/components/schemas/DeliveryAddress"
        totalPrice:
          type: number
          description: The total price of the order
          example: 100.50
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                description: The ID of the product
                example: 66fc32743be26b54e9be9085
              productName:
                type: string
                description: Name of the product
                example: "Pizza Margherita"
              quantity:
                type: integer
                description: The quantity of the product
                example: 2
              selectedSize:
                type: string
                description: The selected size (if applicable)
                example: M
              selectedColor:
                type: string
                description: The selected color (if applicable)
                example: Red
              price:
                type: number
                description: The price of the product
                example: 20.99
        subtotal:
          type: number
          description: The subtotal of the order
          example: 60.00
        tax:
          type: number
          description: The tax applied to the order
          example: 5.99
        deliveryCharge:
          type: number
          description: The delivery charge applied to the order
          example: 5.00
        createdAt:
          type: string
          description: The date when the order was placed
          example: 2024-10-12T19:48:12.688Z
        updatedAt:
          type: string
          description: The date when the order was last updated
          example: 2024-10-12T19:48:12.688Z

    DeliveryAddress:
      type: object
      properties:
        name:
          type: string
          description: The name of the person receiving the order
          example: John Doe
        street:
          type: string
          description: Street address
          example: 123 Main St
        city:
          type: string
          description: City of the delivery address
          example: New York
        state:
          type: string
          description: State of the delivery address
          example: NY
        country:
          type: string
          description: Country of the delivery address
          example: USA
        postalCode:
          type: string
          description: Postal code
          example: 10001
        phone:
          type: string
          description: Contact phone number
          example: 555-1234

    Items:
      type: object
      properties:
        itemType:
          type: string
          description: The type of the item (food, room, product)
          example: food
        businessId:
          type: string
          description: The ID of the associated business (ObjectId)
          example: 60d0fe4f5311236168a109ca
        businessTypeId:
          type: string
          description: The ID of the associated business type (ObjectId)
          example: 60d0fe4f5311236168a109cb
        available:
          type: boolean
          description: Availability status of the item
          example: true
        images:
          type: array
          items:
            type: string
            description: Image URLs for the item
          example:
            - "https://example.com/image1.jpg"
        # For food items
        dishName:
          type: string
          example: Pizza
        dishDescription:
          type: string
          example: "Delicious pizza with extra cheese"
        dishPrice:
          type: number
          example: 10.99
        dineInStatus:
          type: boolean
          example: true
        operatingDetails:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                example: "2024-10-01"
              startTime:
                type: string
                example: "10:00 AM"
              endTime:
                type: string
                example: "10:00 PM"
        tableManagement:
          type: array
          items:
            type: object
            properties:
              tableNumber:
                type: string
                example: "Table 1"
              seatingCapacity:
                type: number
                example: 4
        # For room items
        roomName:
          type: string
          example: "Deluxe Room"
        roomType:
          type: string
          example: "Suite"
        roomDescription:
          type: string
          example: "Spacious room with sea view"
        roomPrice:
          type: number
          example: 150
        roomTax:
          type: number
          example: 20
        checkIn:
          type: string
          example: "2:00 PM"
        checkOut:
          type: string
          example: "11:00 AM"
        amenities:
          type: array
          items:
            type: string
          example:
            - "WiFi"
            - "Air Conditioning"
            - "Pool"
        # For product items
        productName:
          type: string
          example: "T-Shirt"
        productDescription:
          type: string
          example: "Comfortable cotton t-shirt"
        productPrice:
          type: number
          example: 25.99
        variants:
          type: array
          items:
            type: object
            properties:
              variantName:
                type: string
                example: "Medium"
              size:
                type: string
                example: "M"
              color:
                type: string
                example: "Red"
              productPrice:
                type: number
                example: 29.99
              nonReturnable:
                type: boolean
                example: false

    PartnerBusiness:
      type: object
      properties:
        businessName:
          type: string
          description: Name of the business
          example: "My Awesome Business"
        businessType:
          type: string
          description: The ObjectId of the business type
          example: "66db3c19490360a26a552adb"
        businessDescription:
          type: string
          description: A brief description of the business
          example: "We provide high-quality services and offer a wide range of services and products for our customers."
        countryCode:
          type: string
          example: "+91"
        mobile:
          type: string
          description: Business mobile number
          example: "1234567890"
        email:
          type: string
          description: Business email address
          example: "business@example.com"
        businessAddress:
          type: object
          description: Business address details
          properties:
            street:
              type: string
              description: Street address of the business
              example: "123 Business St"
            city:
              type: string
              description: City where the business is located
              example: "City"
            state:
              type: string
              description: State where the business is located
              example: "State"
            country:
              type: string
              description: Country where the business is located
              example: "Country"
            postalCode:
              type: string
              description: Postal code of the business location
              example: "12345"
            latitude:
              type: number
              description: Latitude of the business location
              example: 28.6139
            longitude:
              type: number
              description: Longitude of the business location
              example: 77.2090
            location:
              type: object
              description: GeoJSON location data
              properties:
                type:
                  type: string
                  example: "Point"
                coordinates:
                  type: array
                  items:
                    type: number
                  description: Coordinates [longitude, latitude] for the location
                  example: [77.2090, 28.6139]
        openingDays:
          type: array
          description: Days of the week when the business is open
          items:
            type: string
            example: "Monday"
          example: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
        sameTimeForAllDays:
          type: boolean
          description: Indicates if the same opening and closing times apply for all days
          example: false
        uniformTiming:
          type: object
          description: The uniform opening and closing timings if `sameTimeForAllDays` is true
          properties:
            openingTime:
              type: string
              example: "09:00 AM"
            closingTime:
              type: string
              example: "06:00 PM"
        daywiseTimings:
          type: array
          description: Daywise timings for the business if `sameTimeForAllDays` is false
          items:
            type: object
            properties:
              day:
                type: string
                description: The day of the week
                example: "Monday"
              openingTime:
                type: string
                description: Opening time for that day
                example: "09:00 AM"
              closingTime:
                type: string
                description: Closing time for that day
                example: "06:00 PM"
        images:
          type: array
          description: List of image URLs for the business
          items:
            type: string
            example: "https://example.com/image1.jpg"

    DineOutRequest:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the dine-out request
        user:
          type: string
          description: The ID of the user who made the request
        partner:
          type: string
          description: The ID of the partner (restaurant/hotel)
        business:
          type: string
          description: The ID of the business associated with the request
        date:
          type: string
          format: date
          description: The date of the dine-out
        time:
          type: string
          description: The time of the dine-out
        guests:
          type: integer
          description: The number of guests for the dine-out
        dinnerType:
          type: string
          description: Type of dinner (e.g., Dinner, Lunch, etc.)
        status:
          type: string
          enum: [Pending, Accepted, Rejected]
          description: The current status of the dine-out request
        bookingId:
          type: string
          description: The booking ID (if confirmed)
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Post:
      type: object
      properties:
        userId:
          type: string
          description: ID of the user who created the post
        caption:
          type: string
        images:
          type: array
          items:
            type: string
            format: binary
        likes:
          type: number
        comments:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
              postedBy:
                type: string
                description: User ID of the person who commented
              postedAt:
                type: string
                format: date-time
        postedAt:
          type: string
          format: date-time

    FAQ:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the FAQ
        question:
          type: string
          description: The question of the FAQ
        answer:
          type: string
          description: The answer to the FAQ
        status:
          type: string
          enum: [active, inactive]
          description: The status of the FAQ
      required:
        - id
        - question
        - answer
      example:
        id: "faq123"
        question: "How can I reset my password?"
        answer: "Go to the account settings and click on 'Reset Password'."
        status: "active"

    StaticContent:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the static content
        type:
          type: string
          enum: [terms, refund_policy, shipping_policy, privacy]
          description: Type of static content
        title:
          type: string
          description: Title of the content
        content:
          type: string
          description: The static content body
        status:
          type: string
          enum: [active, inactive]
          description: Status of the static content
      required:
        - id
        - type
        - title
        - content
      example:
        id: "content123"
        type: "terms"
        title: "Terms and Conditions"
        content: "These are the terms and conditions for using our service."
        status: "active"
    # Other schemas like Admin, VerifyOtpRequestUser, VerifyOtpRequestPartner...

  responses:
    DuplicateEmail:
      description: Email already exists
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Unauthorized:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    PasswordMismatch:
      description: The new password and confirm password do not match
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    InvalidCurrentPassword:
      description: The current password is invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

paths:
  /admin/auth/login:
    post:
      summary: Super Admin login with email or mobile and password
      tags:
        - Super Admin
      security:
        - basicAuth: [] # Use Basic Auth for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrPhone:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - emailOrPhone
                - password
      responses:
        "200":
          description: Super Admin logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /admin/auth/refresh-tokens:
    post:
      summary: Refresh Token for Super Admin
      tags:
        - Super Admin
      security:
        - basicAuth: [] # Use Basic Auth for refreshing tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: The refresh token provided during login
              required:
                - refreshToken
      responses:
        "200":
          description: New access token generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        "400":
          description: Invalid refresh token
        "401":
          description: Unauthorized

  /admin/{id}:
    get:
      summary: Retrieve an admin by ID
      tags:
        - Super Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the admin to retrieve
          schema:
            type: string
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Admin retrieved successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update Super Admin profile by ID
      tags:
        - Super Admin
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the admin to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the admin
                email:
                  type: string
                  description: Email of the admin
                phone:
                  type: string
                  description: Phone number of the admin
              example:
                name: "John Doe"
                email: "johndoe@example.com"
                phone: "123-456-7890"
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Admin profile updated successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "400":
          description: Invalid request data
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/auth/forgot-password:
    post:
      summary: Send reset password OTP to admin's email
      tags:
        - Super Admin
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        "200":
          description: Reset password link sent successfully
        "404":
          $ref: "#/components/responses/NotFound"

  /admin/auth/verify-email-otp:
    post:
      summary: Verify password reset email OTP for a admin
      tags:
        - Super Admin
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyOtpRequestAdmin"
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "OTP verified successfully"
        "400":
          description: Invalid OTP or request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"

  /admin/auth/reset-password:
    post:
      summary: Reset password using the provided token
      tags:
        - Super Admin
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Reset password token
                newPassword:
                  type: string
              required:
                - token
                - newPassword
      responses:
        "200":
          description: Password reset successfully
        "400":
          description: Invalid token or new password
        "404":
          $ref: "#/components/responses/NotFound"

  /admin/change-password:
    post:
      summary: Super Admin change password
      tags:
        - Super Admin
      security:
        - bearerAuth: [] # Bearer token required for this route
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  description: currennt password of the admin
                newPassword:
                  type: string
                  example: new password of the admin
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Password changed successfully"
        "400":
          $ref: "#/components/responses/PasswordMismatch"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/InvalidCurrentPassword"

  # Admin Settings
  /admin/settings/create:
    post:
      summary: Create or update system settings
      tags:
        - Admin Settings
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commission:
                  type: number
                  description: Commission rate
                  example: 5
                platformFee:
                  type: number
                  description: Platform fee (optional)
                  example: 2.5
                websiteName:
                  type: string
                  description: Name of the website
                  example: "My Website"
                adminNo:
                  type: string
                  description: Admin contact number
                  example: "+1234567890"
                socialMediaLinks:
                  type: object
                  properties:
                    facebook:
                      type: string
                      example: "https://facebook.com/mywebsite"
                    twitter:
                      type: string
                      example: "https://twitter.com/mywebsite"
                    instagram:
                      type: string
                      example: "https://instagram.com/mywebsite"
                    linkedin:
                      type: string
                      example: "https://linkedin.com/mywebsite"
                address:
                  type: string
                  description: Business address
                  example: "123 Main St"
                city:
                  type: string
                  description: City
                  example: "San Francisco"
                state:
                  type: string
                  description: State
                  example: "CA"
                adminSupportEmail:
                  type: string
                  description: Support email for admin
                  example: "support@mywebsite.com"
      responses:
        201:
          description: System settings created or updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Created"
                  systemSettings:
                    $ref: "#/components/schemas/SystemSetting"

  /admin/settings/get:
    get:
      summary: Get system settings
      tags:
        - Admin Settings
      security:
        - bearerAuth: []
      responses:
        200:
          description: System settings fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Fetched"
                  systemSettings:
                    $ref: "#/components/schemas/SystemSetting"

  /admin/settings/{settingsId}:
    patch:
      summary: Update specific system settings by ID
      tags:
        - Admin Settings
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: settingsId
          required: true
          schema:
            type: string
          description: ID of the system setting to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              example:
                commission: 6
                platformFee: 3
      responses:
        200:
          description: System settings updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Updated"
                  systemSettings:
                    $ref: "#/components/schemas/SystemSetting"

    delete:
      summary: Delete specific system settings by ID
      tags:
        - Admin Settings
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: settingsId
          required: true
          schema:
            type: string
          description: ID of the system setting to delete
      responses:
        200:
          description: System settings deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Deleted"

  # Admin User
  /admin/user:
    get:
      summary: Retrieve admin user list
      tags:
        - Admin User
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Admin User list retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/user/{id}:
    get:
      summary: Retrieve an admin user by ID
      tags:
        - Admin User
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the admin user to retrieve
          schema:
            type: string
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Admin User retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update an admin user by ID
      tags:
        - Admin User
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the admin user to retrieve
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the user
                email:
                  type: string
                  format: email
                  description: Email address of the user
                phone:
                  type: string
                  description: Phone number of the user
                bio:
                  type: string
                  description: Short bio or description of the user
                businessName:
                  type: string
                socialMediaLinks[]:
                  type: array
                  items:
                    type: string
                    description: Social media link
                  description: Array of up to 5 social media links (e.g., Facebook, Instagram)
                profilePhoto:
                  type: string
                  format: binary
                  description: Profile photo image file
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Admin User retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      summary: Delete an admin user
      tags:
        - Admin User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the admin user to delete
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "200":
          description: Admin User deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/user/reset-password:
    post:
      summary: Reset password of user by admin
      tags:
        - Admin User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrPhone:
                  type: string
                  description: email/phone of the user
                type:
                  type: string
                  example: user/partner
              required:
                - emailOrPhone
                - type
      responses:
        "200":
          description: Password reset successfully
        "400":
          description: Invalid token or new password
        "404":
          $ref: "#/components/responses/NotFound"

  /admin/user/business/{businessId}:
    get:
      summary: Retrieve a business by its ID
      tags:
        - Admin User
      parameters:
        - name: businessId
          in: path
          required: true
          description: ID of the business to retrieve
          schema:
            type: string
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Business details retrieved successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/user/update-business/{businessId}:
    patch:
      summary: Update business by ID
      tags:
        - Admin User
      parameters:
        - name: businessId
          in: path
          required: true
          description: ID of the business to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                businessName:
                  type: string
                  description: Name of the business
                businessDescription:
                  type: string
                  description: Description of the business
                countryCode:
                  type: string
                  description: Country code in the format +<digits>
                  example: "+1"
                mobile:
                  type: string
                  description: Mobile number of the business
                email:
                  type: string
                  format: email
                  description: Email address of the business
                businessAddress:
                  type: object
                  description: Business address
                  properties:
                    street:
                      type: string
                      description: Street name
                    city:
                      type: string
                      description: City name
                    state:
                      type: string
                      description: State name
                    country:
                      type: string
                      description: Country name
                    postalCode:
                      type: string
                      description: Postal code
                    latitude:
                      type: number
                      description: Latitude of the business location
                    longitude:
                      type: number
                      description: Longitude of the business location
                    location:
                      type: object
                      properties:
                        type:
                          type: string
                          enum: ["Point"]
                          description: Type of the location (always 'Point')
                        coordinates:
                          type: array
                          items:
                            type: number
                          description: Geographical coordinates [longitude, latitude]
                openingDays:
                  type: array
                  items:
                    type: string
                  description: Days the business is open (e.g., Monday, Tuesday)
                sameTimeForAllDays:
                  type: boolean
                  description: Whether the business has the same opening/closing times for all days
                uniformTiming:
                  type: object
                  description: Uniform timing for all days
                  properties:
                    openingTime:
                      type: string
                      description: Opening time (e.g., 09:00)
                    closingTime:
                      type: string
                      description: Closing time (e.g., 18:00)
                daywiseTimings:
                  type: array
                  items:
                    type: object
                    properties:
                      day:
                        type: string
                        description: The day of the week
                      openingTime:
                        type: string
                        description: Opening time (e.g., 09:00)
                      closingTime:
                        type: string
                        description: Closing time (e.g., 18:00)
                  description: Daywise opening and closing times for each day
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Business Updatedd Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/user/orders/{userId}:
    get:
      summary: Retrieve an order by userID
      tags:
        - Admin User
      parameters:
        - name: userId
          in: query
          required: false
          description: Optional ID of the user to filter orders
          schema:
            type: string
            example: "60f69bf4fc13ae456b000001"
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            example: 1
        - name: limit
          in: query
          required: false
          description: Number of orders per page
          schema:
            type: integer
            default: 10
            example: 10
        - name: search
          in: query
          required: false
          description: Search query
          schema:
            type: string
        - name: sortBy
          in: query
          required: false
          description: Field to sort orders by (e.g., `createdAt`, `totalPrice`)
          schema:
            type: string
            default: "createdAt"
        - name: sortOrder
          in: query
          required: false
          description: Order of sorting, either `asc` or `desc`
          schema:
            type: string
            enum: [asc, desc]
            default: "desc"
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Admin User's order retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/user/orders/id/{orderId}:
    get:
      summary: Retrieve an order by orderID
      tags:
        - Admin User
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order to retrieve
          schema:
            type: string
            example: "60f69bf4fc13ae456b000001"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Admin User's order retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/user/orders:
    get:
      summary: Get List of All Orders
      tags:
        - Admin User
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            example: 1
        - name: limit
          in: query
          required: false
          description: Number of orders per page
          schema:
            type: integer
            default: 10
            example: 10
        - name: search
          in: query
          required: false
          description: Search query
          schema:
            type: string
        - name: sortBy
          in: query
          required: false
          description: Field to sort orders by (e.g., `createdAt`, `totalPrice`)
          schema:
            type: string
            default: "createdAt"
        - name: sortOrder
          in: query
          required: false
          description: Order of sorting, either `asc` or `desc`
          schema:
            type: string
            enum: [asc, desc]
            default: "desc"
        - name: itemType
          in: query
          required: false
          description: Filter orders by the type of item (e.g., `room`, `product`, `food`)
          schema:
            type: string
            enum: [room, product, food]
        - name: userId
          in: query
          required: false
          description: Filter orders by user ID
          schema:
            type: string
        - name: partnerId
          in: query
          required: false
          description: Filter orders by partner ID
          schema:
            type: string
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Admin User's order retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/user/orders/transaction-history:
    get:
      summary: Get All Transactions History
      tags:
        - Admin User
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            example: 1
        - name: limit
          in: query
          required: false
          description: Number of orders per page
          schema:
            type: integer
            default: 10
            example: 10
        - name: search
          in: query
          required: false
          description: Search query
          schema:
            type: string
        - name: sortBy
          in: query
          required: false
          description: Field to sort orders by (e.g., `createdAt`, `totalPrice`)
          schema:
            type: string
            default: "createdAt"
        - name: sortOrder
          in: query
          required: false
          description: Order of sorting, either `asc` or `desc`
          schema:
            type: string
            enum: [asc, desc]
            default: "desc"
        - name: itemType
          in: query
          required: false
          description: Filter orders by the type of item (e.g., `room`, `product`, `food`)
          schema:
            type: string
            enum: [room, product, food]
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Admin User's order transcations retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/user/orders/refunds:
    get:
      summary: Get Refund Details
      tags:
        - Admin User
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            example: 1
        - name: limit
          in: query
          required: false
          description: Number of refunds per page
          schema:
            type: integer
            default: 10
            example: 10
        - name: search
          in: query
          required: false
          description: Search query to filter by user name or order ID
          schema:
            type: string
        - name: sortBy
          in: query
          required: false
          description: Field to sort refunds by (e.g., `createdAt`, `amount`)
          schema:
            type: string
            default: "createdAt"
        - name: sortOrder
          in: query
          required: false
          description: Order of sorting, either `asc` or `desc`
          schema:
            type: string
            enum: [asc, desc]
            default: "desc"
        - name: status
          in: query
          required: false
          description: Filter refunds by status (e.g., `pending_admin`, `pending_partner` `approved`, `rejected`)
          schema:
            type: string
            enum: [pending_admin, pending_partner, approved, rejected]
        - name: fromDate
          in: query
          required: false
          description: Start date for filtering refunds
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: toDate
          in: query
          required: false
          description: End date for filtering refunds
          schema:
            type: string
            format: date
            example: "2024-12-31"
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Admin User's refund details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Refund details fetched successfully
                  data:
                    type: object
                    properties:
                      docs:
                        type: array
                        items:
                          type: object
                          properties:
                            refundId:
                              type: string
                              example: "672c700fa1a40f804d63ef4a"
                            transactionId:
                              type: string
                              example: "672c700fa1a40f804d63ef4c"
                            createdAt:
                              type: string
                              format: date-time
                              example: "2024-11-08T05:13:24.489Z"
                            userName:
                              type: string
                              example: "John Doe"
                            orderId:
                              type: string
                              example: "1730965519"
                            status:
                              type: string
                              enum: ["pending", "approved", "rejected"]
                              example: "approved"
                            amount:
                              type: number
                              example: 59.99
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      totalDocs:
                        type: integer
                        example: 4
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/user/orders/refunds/update-status:
    patch:
      summary: Update Refund Status by Admin
      tags:
        - Admin User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: string
                  description: ID of the order related to the refund request
                  example: "1234567890abcdef12345678"
                status:
                  type: string
                  description: New status of the refund (`approved` or `rejected`)
                  enum: ["approved", "rejected"]
                  example: "approved"
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Refund status updated successfully by admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Refund approved by admin successfully.
                  data:
                    type: object
                    properties:
                      orderId:
                        type: string
                        example: "1234567890abcdef12345678"
                      status:
                        type: string
                        enum: ["approved", "rejected"]
                        example: "approved"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/user/orders/transaction-history/{orderId}:
    get:
      summary: Retrieve an transaction by orderID
      tags:
        - Admin User
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order to retrieve
          schema:
            type: string
            example: "60f69bf4fc13ae456b000001"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Admin User's order transaction retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/user/orders/partner/{partnerId}:
    get:
      summary: Get List of Partner's Orders
      tags:
        - Admin User
      parameters:
        - name: partnerId
          in: path
          required: true
          description: The ID of the partner's order to retrieve
          schema:
            type: string
            example: "60f69bf4fc13ae456b000001"
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            example: 1
        - name: limit
          in: query
          required: false
          description: Number of orders per page
          schema:
            type: integer
            default: 10
            example: 10
        - name: search
          in: query
          required: false
          description: Search query
          schema:
            type: string
        - name: sortBy
          in: query
          required: false
          description: Field to sort orders by (e.g., `createdAt`, `totalPrice`)
          schema:
            type: string
            default: "createdAt"
        - name: sortOrder
          in: query
          required: false
          description: Order of sorting, either `asc` or `desc`
          schema:
            type: string
            enum: [asc, desc]
            default: "desc"
        - name: itemType
          in: query
          required: false
          description: Filter orders by the type of item (e.g., `room`, `product`, `food`)
          schema:
            type: string
            enum: [room, product, food]
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Admin User's order retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/user/dineout-requests:
    get:
      summary: Get List of All Dineout Requests
      tags:
        - Admin User
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            example: 1
        - name: limit
          in: query
          required: false
          description: Number of orders per page
          schema:
            type: integer
            default: 10
            example: 10
        - name: search
          in: query
          required: false
          description: Search query
          schema:
            type: string
        - name: sortBy
          in: query
          required: false
          description: Field to sort orders by (e.g., `createdAt`, `totalPrice`)
          schema:
            type: string
            default: "createdAt"
        - name: sortOrder
          in: query
          required: false
          description: Order of sorting, either `asc` or `desc`
          schema:
            type: string
            enum: [asc, desc]
            default: "desc"
        - name: status
          in: query
          required: false
          description: Filter dine-out requests by status (e.g., `Pending`, `Accepted`, `Rejected`)
          schema:
            type: string
            enum: [Pending, Accepted, Rejected]
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Admin Dine Out Requests retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/user/dineout-requests/{requestId}:
    get:
      summary: Retrieve an dine out request by requestId
      tags:
        - Admin User
      parameters:
        - name: requestId
          in: path
          required: true
          description: The ID of the dineout to retrieve
          schema:
            type: string
            example: "60f69bf4fc13ae456b000001"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Admin Dine Out Requests retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  # Admin Staff
  /admin/staff/create:
    post:
      summary: Add a new Admin Staff
      tags:
        - Admin Staff
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminStaff"
      responses:
        "201":
          description: Admin Staff added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminStaff"
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          $ref: "#/components/responses/Duplicate"

  /admin/staff/list:
    get:
      summary: Get Admin Staff List
      tags:
        - Admin Staff
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Limit the number of results per page
          required: false
          schema:
            type: integer
            example: 10
        - name: page
          in: query
          description: The page number for pagination
          required: false
          schema:
            type: integer
            example: 1
        - name: search
          in: query
          description: Search by staff name, email, phone, or role name
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Filter by staff status (0 for inactive, 1 for active)
          required: false
          schema:
            type: integer
            enum: [0, 1]
            example: 1
      responses:
        "200":
          description: Admin Staff with list retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminStaff"
        "404":
          description: Admin Staff not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/staff/{staffId}/role:
    get:
      summary: Get Admin Staff with role and permissions by ID
      tags:
        - Admin Staff
      security:
        - bearerAuth: []
      parameters:
        - name: staffId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the Admin Staff
      responses:
        "200":
          description: Admin Staff with role and permissions retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminStaff"
        "404":
          description: Admin Staff not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/staff/{staffId}:
    get:
      summary: Get details of an Admin Staff by ID
      tags:
        - Admin Staff
      security:
        - bearerAuth: []
      parameters:
        - name: staffId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the Admin Staff to retrieve
      responses:
        "200":
          description: Admin Staff details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminStaff"
        "404":
          description: Admin Staff not found
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update an Admin Staff by ID
      tags:
        - Admin Staff
      security:
        - bearerAuth: []
      parameters:
        - name: staffId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the Admin Staff to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminStaff"
      responses:
        "200":
          description: Admin Staff updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminStaff"
        "400":
          description: Invalid input
        "404":
          description: Admin Staff not found
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      summary: Delete an Admin Staff by ID
      tags:
        - Admin Staff
      security:
        - bearerAuth: []
      parameters:
        - name: staffId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the Admin Staff to delete
      responses:
        "200":
          description: Admin Staff deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminStaff"
        "404":
          description: Admin Staff not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/staff/reset-password:
    post:
      summary: Reset password of staff by admin
      tags:
        - Admin Staff
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrPhone:
                  type: string
                  description: email/phone of the user
                type:
                  type: string
                  example: staff
              required:
                - emailOrPhone
                - type
      responses:
        "200":
          description: Password reset successfully
        "400":
          description: Invalid token or new password
        "404":
          $ref: "#/components/responses/NotFound"

  /admin/staff/password/change:
    post:
      summary: Staff Change Password
      tags:
        - Admin Staff
      security:
        - bearerAuth: [] # Bearer token required for this route
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  description: currennt password of the staff
                newPassword:
                  type: string
                  example: new password of the staff
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Password changed successfully"
        "400":
          $ref: "#/components/responses/PasswordMismatch"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/InvalidCurrentPassword"

  # Admin Staff Role
  /admin/roles/create:
    post:
      summary: Create a new Role
      tags:
        - Role
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
      responses:
        "201":
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          description: Role already exists

  /admin/roles/list:
    get:
      summary: Get all Roles
      tags:
        - Role
      security:
        - bearerAuth: []
      parameters:
        - name: sortBy
          in: query
          description: Sorting order of the roles
          schema:
            type: string
            example: "createdAt:desc"
        - name: limit
          in: query
          description: Limit for pagination
          schema:
            type: integer
            example: 10
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /admin/roles/{roleId}:
    get:
      summary: Get Role by ID
      tags:
        - Role
      security:
        - bearerAuth: []
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the role to retrieve
      responses:
        "200":
          description: Role details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "404":
          description: Role not found
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update a Role by ID
      tags:
        - Role
      security:
        - bearerAuth: []
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the role to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
      responses:
        "200":
          description: Role updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "400":
          description: Invalid input
        "404":
          description: Role not found
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      summary: Delete a Role by ID
      tags:
        - Role
      security:
        - bearerAuth: []
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the role to delete
      responses:
        "200":
          description: Role deleted successfully
        "404":
          description: Role not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  # Item Category (Admin)
  /item-category/create:
    post:
      summary: Create a new category for items
      tags:
        - Item Category (Admin)
      security:
        - bearerAuth: [] # Bearer token required for this route
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categoryName:
                  type: string
                  description: The name of the category to be created
                categoryType:
                  type: string
                  enum:
                    - food
                    - room
                    - product
                  description: The type of category
                parentCategory:
                  type: string
                  description: The ID of the parent category (optional)
                tax:
                  type: number
                inheritParentTax:
                  type: string
                  example: false
              required:
                - categoryName
                - categoryType
                - tax
                - inheritParentTax
      responses:
        "201":
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemCategory"
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          $ref: "#/components/responses/Duplicate"

  /item-category/{categoryId}/tax:
    get:
      summary: Retrieve the tax for the category
      tags:
        - Item Category (Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          description: The ID of the category to retrieve tax
          schema:
            type: string
      responses:
        "200":
          description: Category's tax retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemCategory"
        "404":
          description: Categories not found

  /item-category/type/{categoryType}:
    get:
      summary: Get categories by type
      tags:
        - Item Category (Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: categoryType
          in: path
          required: true
          description: The type of the category to retrieve
          schema:
            type: string
            enum:
              - food
              - product
              - room
      responses:
        "200":
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemCategory"
        "404":
          description: Categories not found

  /item-category/categories:
    get:
      summary: Get all categories with filters, pagination, and sorting
      tags:
        - Item Category (Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Limit number of results per page
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          description: Sort order for categories (asc or desc)
          schema:
            type: string
            enum:
              - asc
              - desc
            default: asc
        - name: search
          in: query
          description: Search categories by name or specific field
          schema:
            type: string
        - name: status
          in: query
          description: Filter by status (1 for active, 0 for inactive)
          schema:
            type: string
            enum:
              - "1"
              - "0"
        - name: categoryType
          in: query
          description: Filter categories by type (e.g., food, room, product)
          schema:
            type: string
            enum:
              - food
              - room
              - product
      responses:
        "200":
          description: Categories retrieved successfully with filters, pagination, and sorting
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ItemCategory"
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                        example: 100
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
        "400":
          description: Invalid input for filtering categories
        "404":
          description: No categories found matching the filters

  /item-category/subcategories/{parentCategoryId}:
    get:
      summary: Get subcategories by parent category
      tags:
        - Item Category (Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: parentCategoryId
          in: path
          required: true
          description: The ID of the parent category to retrieve subcategories
          schema:
            type: string
      responses:
        "200":
          description: Subcategories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemCategory"
        "404":
          description: Subcategories not found

  /item-category/update/{categoryId}:
    patch:
      summary: Update a category
      tags:
        - Item Category (Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          description: The ID of the category to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categoryName:
                  type: string
                  description: The updated name of the category
                  example: "Main Course"
                categoryType:
                  type: string
                  description: The updated type of the category (e.g., food, product, room)
                  example: "food"
                parentCategory:
                  type: string
                  description: The updated ID of the parent category (if applicable)
                  example: "605c72bc6f1e3b30d4e3c5d4"
                status:
                  type: number
                  description: 0 is Inactive, 1 is Active
                  example: 0
                isDelete:
                  type: number
                  example: 0
      responses:
        "200":
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemCategory"
        "400":
          description: Invalid input
        "404":
          description: Category not found

  /item-category/delete/{categoryId}:
    delete:
      summary: Delete a category
      tags:
        - Item Category (Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          description: The ID of the category to delete
          schema:
            type: string
      responses:
        "200":
          description: Category deleted successfully
        "404":
          description: Category not found

  # Templates
  /templates:
    post:
      summary: Create a new template
      tags:
        - Templates
      security:
        - bearerAuth: []
      requestBody:
        description: Template data to be created
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                templateName:
                  type: string
                  example: "Account Activation"
                subject:
                  type: string
                  example: "Activate Your Account"
                fromName:
                  type: string
                  example: "Ocean Support"
                fromEmail:
                  type: string
                  example: "support@ocean.com"
                templateFor:
                  type: string
                  example: "account-activation"
                templateType:
                  type: integer
                  enum: [0, 1]
                  example: 0
                templateDisc:
                  type: string
                  example: "<p>Hello {userName},</p><p>Click the link below to activate your account:</p><p>{activationLink}</p>"
                orderId:
                  type: string
                  format: uuid
                  example: "5f8d0d55b54764421b7156e1"
                  description: "Optional order ID to link the template with a specific order"
    responses:
      responses:
        200:
          description: Template created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Template created successfully"
                  data:
                    type: object
                    $ref: "#/components/schemas/Template"
    get:
      summary: Retrieve all templates
      tags:
        - Templates
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: sortBy
          schema:
            type: string
          example: createdAt:desc
          description: Field to sort by (e.g., createdAt)
        - in: query
          name: limit
          schema:
            type: integer
          example: 10
          description: Maximum number of results per page
        - in: query
          name: page
          schema:
            type: integer
          example: 1
          description: Page number
        - in: query
          name: search
          schema:
            type: string
          example: "Account"
          description: Search term to filter templates
        - name: status
          in: query
          description: Filter by template status (0 for inactive, 1 for active)
          required: false
          schema:
            type: integer
            enum: [0, 1]
            example: 1
      responses:
        200:
          description: List of templates retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Templates retrieved successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Template"

  /templates/{templateId}:
    get:
      summary: Get a single template by ID
      tags:
        - Templates
      security:
        - bearerAuth: []
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
          example: "62d78c729035d82a40d92fb4"
      responses:
        200:
          description: Template details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Template details retrieved successfully"
                  data:
                    $ref: "#/components/schemas/Template"
    patch:
      summary: Update a template
      tags:
        - Templates
      security:
        - bearerAuth: []
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Fields to update in the template
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                templateName:
                  type: string
                subject:
                  type: string
                fromName:
                  type: string
                fromEmail:
                  type: string
                templateDisc:
                  type: string
                status:
                  type: integer
                  enum: [0, 1]
                isDelete:
                  type: integer
                  enum: [0, 1]
      responses:
        200:
          description: Template updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Template updated successfully"
                  data:
                    $ref: "#/components/schemas/Template"
    delete:
      summary: Delete a template
      tags:
        - Templates
      security:
        - bearerAuth: []
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Template deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Template deleted successfully"

  /templates/send-email:
    post:
      summary: Send an email using a template
      tags:
        - Templates
      security:
        - bearerAuth: []
      requestBody:
        description: Email data and template information
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to:
                  type: string
                  example: "user@example.com"
                templateFor:
                  type: string
                  example: "account-activation"
                data:
                  type: object
                  example:
                    userName: "John Doe"
                    activationLink: "https://example.com/activate?token=abc123"
      responses:
        200:
          description: Email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Email sent successfully"

  # Business Type
  /business-type:
    get:
      summary: Get list of business types
      tags:
        - Business Type (Admin)
      security:
        - bearerAuth: [] # Bearer token required for this route
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order for business types (asc or desc)
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Limit number of results per page
        - name: searchBy
          in: query
          required: false
          schema:
            type: string
          description: Search business types by name or any specific field
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [1, 0]
          description: Filter by status (active or inactive)
      responses:
        "200":
          description: List of business types
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BusinessType"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    post:
      summary: Add a new business type
      tags:
        - Business Type (Admin)
      security:
        - bearerAuth: [] # Bearer token required for this route
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the business type
                  example: "Retail"
                image:
                  type: string
                  format: binary
                  description: Image file to upload for the business type
      responses:
        "201":
          description: Business type added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessType"
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          $ref: "#/components/responses/Duplicate"

  /business-type/{id}:
    get:
      summary: Get details of a specific business type
      tags:
        - Business Type (Admin)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the business type to retrieve
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "200":
          description: Business type details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessType"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update a business type
      tags:
        - Business Type (Admin)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the business type to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BusinessType"
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "200":
          description: Business type updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BusinessType"
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    delete:
      summary: Delete a business type
      tags:
        - Business Type (Admin)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the business type to delete
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "200":
          description: Business type deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /business-type/for/user:
    get:
      summary: Get list of business types for users (Basic Auth)
      tags:
        - Business Type (Admin)
      security:
        - basicAuth: [] # Basic authentication for user route
      responses:
        "200":
          description: List of business types for users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BusinessType"
        "401":
          $ref: "#/components/responses/Unauthorized"

  # Users
  /user/auth/register:
    post:
      summary: Register a new user
      tags:
        - User
      security:
        - basicAuth: [] # Use Basic Auth for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                countryCode:
                  type: string
                  example: "+91"
                phone:
                  type: string
                password:
                  type: string
                confirmPassword:
                  type: string
                type:
                  type: string
                  example: user
              required:
                - name
                - email
                - phone
                - password
                - confirmPassword
                - type
      responses:
        "200":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        "400":
          $ref: "#/components/responses/DuplicateEmail"

  /user/auth/verify-mobile-otp:
    post:
      summary: Verify mobile OTP for a user
      tags:
        - User
      security:
        - basicAuth: [] # Use Basic Auth for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyOtpRequestUser"
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "OTP verified successfully"
        "400":
          description: Invalid OTP or request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"

  /user/auth/verify-email-otp:
    post:
      summary: Verify email OTP for a user
      tags:
        - User
      security:
        - basicAuth: [] # Use Basic Auth for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyOtpRequestUser"
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "OTP verified successfully"
        "400":
          description: Invalid OTP or request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"

  /user/auth/login:
    post:
      summary: Login with email or phone and password
      tags:
        - User
      security:
        - basicAuth: [] # Use Basic Auth for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrPhone:
                  type: string
                password:
                  type: string
                type:
                  type: string
                  example: user
                  enum:
                    - user
                    - partner
              required:
                - email
                - password
                - type
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /user/auth/logout:
    post:
      summary: User logout
      tags:
        - User
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: The refresh token to be invalidated
              required:
                - refreshToken
      responses:
        "200":
          description: User logged out successfully
        "401":
          $ref: "#/components/responses/Unauthorized"

  /user/auth/forgot-password:
    post:
      summary: Send forgot password otp to user's email/phone
      tags:
        - User
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrPhone:
                  type: string
                  format: email
                type:
                  type: string
                  enum:
                    - user
              required:
                - emailOrPhone
                - type
      responses:
        "200":
          description: Reset password link sent successfully
        "404":
          $ref: "#/components/responses/NotFound"

  /user/auth/reset-password:
    post:
      summary: Reset password using the provided token
      tags:
        - User
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Reset password token
                newPassword:
                  type: string
              required:
                - token
                - newPassword
      responses:
        "200":
          description: Password reset successfully
        "400":
          description: Invalid token or new password
        "404":
          $ref: "#/components/responses/NotFound"

  /user/auth/resend-otp:
    post:
      summary: Resend OTP for user
      tags:
        - User
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResendOtpRequest"
      responses:
        "200":
          description: OTP resent successfully
        "400":
          description: Invalid request data
        "404":
          $ref: "#/components/responses/NotFound"

  /user/change-password:
    post:
      summary: User change password
      tags:
        - User
      security:
        - bearerAuth: [] # Bearer token required for this route
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Password changed successfully"
        "400":
          $ref: "#/components/responses/PasswordMismatch"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/InvalidCurrentPassword"

  /user/follow/{followingId}:
    post:
      summary: Follow a user
      tags:
        - User
      parameters:
        - in: path
          name: followingId
          required: true
          schema:
            type: string
          description: ID of the user to follow
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully Followed User
        "400":
          description: Bad Request (e.g., trying to follow a partner or yourself)
        "404":
          description: User Not Found
        "500":
          description: Internal Server Error

  /user/follow-requests:
    get:
      summary: Get all follow requests for the user
      tags:
        - User
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: Page number for pagination (default is 1)
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
          description: Number of results per page (default is 10)
        - in: query
          name: search
          required: false
          schema:
            type: string
          description: Search by follower's name or email
        - in: query
          name: sortBy
          required: false
          schema:
            type: string
            default: createdAt
          description: Field to sort by (default is `createdAt`)
        - in: query
          name: sortOrder
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sorting order - `asc` for ascending, `desc` for descending (default is `desc`)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully retrieved follow requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Follow requests retrieved successfully
                  data:
                    type: object
                    properties:
                      docs:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                              example: 61b8b5b1f2b3f700149adc42
                            follower:
                              type: object
                              properties:
                                _id:
                                  type: string
                                  example: 61b8b589f2b3f700149adc41
                                name:
                                  type: string
                                  example: John Doe
                                email:
                                  type: string
                                  example: john@example.com
                                profilePhoto:
                                  type: string
                                  example: https://example.com/john.jpg
                            following:
                              type: string
                              example: 61b8b53bf2b3f700149adc40
                            status:
                              type: string
                              example: pending
                            createdAt:
                              type: string
                              format: date-time
                              example: 2024-10-09T11:02:03.533Z
                      totalDocs:
                        type: integer
                        example: 18
                      limit:
                        type: integer
                        example: 10
                      totalPages:
                        type: integer
                        example: 2
                      page:
                        type: integer
                        example: 1
                      pagingCounter:
                        type: integer
                        example: 1
                      hasPrevPage:
                        type: boolean
                        example: false
                      hasNextPage:
                        type: boolean
                        example: true
                      prevPage:
                        type: integer
                        nullable: true
                        example: null
                      nextPage:
                        type: integer
                        nullable: true
                        example: 2
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Bad Request - Invalid Parameters
        "404":
          description: Follow Requests Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Follow Requests Not Found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /user/follow-requests/{requestId}/approve:
    post:
      summary: Accept the follow request
      tags:
        - User
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            type: string
          description: ID of the follow reuqest to accept
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully Accepted
        "400":
          description: Bad Request (e.g., trying to follow a partner or yourself)
        "404":
          description: User Not Found
        "500":
          description: Internal Server Error

  /user/follow-requests/{requestId}/reject:
    post:
      summary: Reject the follow request
      tags:
        - User
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            type: string
          description: ID of the follow reuqest to reject
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Request Rejected
        "400":
          description: Bad Request (e.g., trying to follow a partner or yourself)
        "404":
          description: User Not Found
        "500":
          description: Internal Server Error

  /user/{userId}/followers:
    get:
      summary: Get followers of a user with optional search
      tags:
        - User
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: ID of the user whose followers are being listed
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: Page number for pagination (default is 1)
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
          description: Number of results per page (default is 10)
        - in: query
          name: search
          required: false
          schema:
            type: string
          description: Search by follower's name or email
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully retrieved followers list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      docs:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                              example: 61b8b5b1f2b3f700149adc42
                            follower:
                              type: object
                              properties:
                                _id:
                                  type: string
                                  example: 61b8b589f2b3f700149adc41
                                name:
                                  type: string
                                  example: John Doe
                                email:
                                  type: string
                                  example: john@example.com
                                profilePhoto:
                                  type: string
                                  example: https://example.com/john.jpg
                      totalDocs:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      totalPages:
                        type: integer
                        example: 1
                      page:
                        type: integer
                        example: 1
                      pagingCounter:
                        type: integer
                        example: 1
                      hasPrevPage:
                        type: boolean
                        example: false
                      hasNextPage:
                        type: boolean
                        example: false
                      prevPage:
                        type: integer
                        nullable: true
                        example: null
                      nextPage:
                        type: integer
                        nullable: true
                        example: null
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Followers retrieved successfully.
        "400":
          description: Bad Request
        "404":
          description: User Not Found
        "500":
          description: Internal Server Error

  /user/{userId}/following:
    get:
      summary: Get users that a specific user is following with optional search
      tags:
        - User
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: ID of the user whose following list is being retrieved
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: Page number for pagination (default is 1)
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            default: 10
          description: Number of results per page (default is 10)
        - in: query
          name: search
          required: false
          schema:
            type: string
          description: Search by following user's name or email
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully retrieved following list
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      docs:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                              example: 61b8b5b1f2b3f700149adc42
                            following:
                              type: object
                              properties:
                                _id:
                                  type: string
                                  example: 61b8b589f2b3f700149adc41
                                name:
                                  type: string
                                  example: John Doe
                                email:
                                  type: string
                                  example: john@example.com
                                profilePhoto:
                                  type: string
                                  example: https://example.com/john.jpg
                      totalDocs:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      totalPages:
                        type: integer
                        example: 1
                      page:
                        type: integer
                        example: 1
                      pagingCounter:
                        type: integer
                        example: 1
                      hasPrevPage:
                        type: boolean
                        example: false
                      hasNextPage:
                        type: boolean
                        example: false
                      prevPage:
                        type: integer
                        nullable: true
                        example: null
                      nextPage:
                        type: integer
                        nullable: true
                        example: null
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Following list retrieved successfully.
        "400":
          description: Bad Request
        "404":
          description: User Not Found
        "500":
          description: Internal Server Error

  /user/unfollow/{followingId}:
    post:
      summary: Unfollow a user
      tags:
        - User
      parameters:
        - in: path
          name: followingId
          required: true
          schema:
            type: string
          description: ID of the user to unfollow
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully Unfollowed User
        "400":
          description: Bad Request (e.g., not following the user)
        "404":
          description: User Not Found
        "500":
          description: Internal Server Error

  # Update email
  /user/update-email:
    patch:
      summary: Update user's email directly
      tags:
        - User
      security:
        - basicAuth: [] # Use Basic Auth for authenticated routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The ID of the partner/user
                email:
                  type: string
                  format: email
              required:
                - userId
                - email
      responses:
        "200":
          description: Email updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Email updated successfully"
        "400":
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  # Update phone
  /user/update-phone:
    patch:
      summary: Update user's phone directly
      tags:
        - User
      security:
        - basicAuth: [] # Use Basic Auth for authenticated routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The ID of the partner/user
                phone:
                  type: string
              required:
                - phone
                - userId
      responses:
        "200":
          description: Phone number updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Phone number updated successfully"
        "400":
          description: Invalid phone number
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /user/profile/{id}:
    get:
      summary: Get user profile by ID
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: string
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update user profile
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the user
                email:
                  type: string
                  format: email
                  description: Email address of the user
                phone:
                  type: string
                  description: Phone number of the user
                bio:
                  type: string
                  description: Short bio or description of the user
                businessName:
                  type: string
                socialMediaLinks[]:
                  type: array
                  items:
                    type: string
                    description: Social media link
                  description: Array of up to 5 social media links (e.g., Facebook, Instagram)
                profilePhoto:
                  type: string
                  format: binary
                  description: Profile photo image file
      security:
        - bearerAuth: [] # Authentication mechanism
      responses:
        "200":
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /user/lists:
    get:
      summary: Users lists to follow
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Users lists retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Users lists retrieved successfully"
        "400":
          description: Invalid User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /user/{Id}/profile-image:
    delete:
      summary: Delete Profile image
      tags:
        - User
      parameters:
        - in: path
          name: Id
          required: true
          schema:
            type: string
          description: ID of the user to delete profile image
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully Deleted
        "400":
          description: Bad Request
        "404":
          description: User Not Found
        "500":
          description: Internal Server Error

  /address:
    post:
      summary: Add a new address
      tags:
        - User Address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                countryCode:
                  type: string
                phone:
                  type: string
                address:
                  type: string
                landmark:
                  type: string
                city:
                  type: string
                state:
                  type: string
                postalCode:
                  type: string
                isDefault:
                  type: boolean
      responses:
        "201":
          description: AddresUser s added successfully
      security:
        - bearerAuth: []

    get:
      summary: Get all addresses for the current user
      tags:
        - User Address
      responses:
        "200":
          description: Success
      security:
        - bearerAuth: []

  /address/{addressId}:
    patch:
      summary: Update an address
      tags:
        - User Address
      parameters:
        - name: addressId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                countryCode:
                  type: string
                phone:
                  type: string
                address:
                  type: string
                landmark:
                  type: string
                city:
                  type: string
                state:
                  type: string
                postalCode:
                  type: string
                isDefault:
                  type: boolean
      responses:
        "200":
          description: Address updated successfully
      security:
        - bearerAuth: []

    delete:
      summary: Delete an address
      tags:
        - User Address
      parameters:
        - name: addressId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Address deleted successfully
      security:
        - bearerAuth: []

  # Dine-Out-User
  /dine-out/request/create:
    post:
      summary: Create a new DineOut request (User)
      tags:
        - DineOut Request (User)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                partnerId:
                  type: string
                  description: The ID of the partner (restaurant or hotel)
                  example: "66f55b28e1419e1561242e3e"
                businessId:
                  type: string
                  description: The business ID associated with the partner
                  example: "66f96392fb4bcb8af802f4c8"
                date:
                  type: string
                  format: date
                  description: Date of the dine-out request
                  example: "2024-10-01"
                time:
                  type: string
                  description: Time of the dine-out request
                  example: "10:00"
                guests:
                  type: integer
                  description: Number of guests for the dine-out
                  example: 4
                dinnerType:
                  type: string
                  description: Type of dinner (e.g., Dinner, Lunch, etc.)
                  example: "Dinner"
      responses:
        "201":
          description: DineOut request created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Dine-out request sent successfully"
                  request:
                    $ref: "#/components/schemas/DineOutRequest"
        "400":
          description: Invalid request (e.g., missing required fields, invalid businessId)

  /dine-out/check-time-slot:
    post:
      summary: Check Time Slot Available
      tags:
        - DineOut Request (User)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                businessId:
                  type: string
                  description: The ID of the business (restaurant or hotel)
                  example: "6708eb21d3243af482c08421"
                date:
                  type: string
                  format: date
                  example: "2024-10-01"
                time:
                  type: string
                  example: "13:00"
      responses:
        "201":
          description: Time slot checked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Time slot checked  successfully"
        "400":
          description: Invalid request (e.g., missing required fields, invalid businessId)

  # Cart
  /cart/add:
    post:
      tags:
        - Cart
      security:
        - bearerAuth: []
      summary: Add an item to the cart (Product/Food/Room(Checkout))
      requestBody:
        description: The data required to add an item to the cart
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemId:
                  type: string
                  description: The ID of the product or food item
                  example: 66fc32743be26b54e9be9085
                quantity:
                  type: integer
                  description: The quantity to add to the cart
                  example: 2
                guestCount:
                  type: integer
                  description: The guest count for room
                  example: 2
                checkIn:
                  type: string
                  description: The check in for the room
                  example: 2024-10-20
                checkOut:
                  type: string
                  description: The check out for the room
                  example: 2024-10-20
                selectedSize:
                  type: string
                  description: Size of the product (if applicable)
                  example: M
                selectedColor:
                  type: string
                  description: Color of the product (if applicable)
                  example: Red
                deliveryAddress:
                  $ref: "#/components/schemas/DeliveryAddress"
      responses:
        "200":
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product added to cart successfully
                  cart:
                    $ref: "#/components/schemas/CartItem"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal server error

  /cart:
    get:
      tags:
        - Cart
      security:
        - bearerAuth: []
      summary: Get the current user's cart
      description: Retrieve the cart for the authenticated user, including all items and price details.
      responses:
        "200":
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            productId:
                              type: string
                              description: The ID of the product or food item
                              example: 66fc32743be26b54e9be9085
                            quantity:
                              type: integer
                              description: Quantity of the item in the cart
                              example: 2
                            selectedSize:
                              type: string
                              description: Size of the product (if applicable)
                              example: M
                            selectedColor:
                              type: string
                              description: Color of the product (if applicable)
                              example: Red
                            price:
                              type: number
                              description: The price of the item
                              example: 10.99
                      subtotal:
                        type: number
                        description: Subtotal for the cart (before tax and delivery charge)
                        example: 54.95
                      tax:
                        type: number
                        description: Tax applied to the cart
                        example: 2.7475
                      deliveryCharge:
                        type: number
                        description: Delivery charge applied to the cart
                        example: 5
                      totalPrice:
                        type: number
                        description: Total price of the cart (subtotal + tax + delivery charge)
                        example: 62.6975
                      deliveryAddress:
                        $ref: "#/components/schemas/DeliveryAddress"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Cart not found
        "500":
          description: Internal server error

  /cart/remove:
    delete:
      tags:
        - Cart
      security:
        - bearerAuth: []
      summary: Remove an item from the cart
      requestBody:
        description: The data required to remove an item from the cart
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemId:
                  type: string
                  description: The ID of the item to remove
                  example: 66fc32743be26b54e9be9085
      responses:
        "200":
          description: Item removed from cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product removed from cart successfully
                  cart:
                    type: object
                    example: null
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Item not found in cart
        "500":
          description: Internal server error

  /cart/update:
    patch:
      tags:
        - Cart
      security:
        - bearerAuth: []
      summary: Update the quantity of an item in the cart
      requestBody:
        description: The data required to update the quantity of an item in the cart
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemId:
                  type: string
                  description: The ID of the item item
                  example: 66fc32743be26b54e9be9085
                quantity:
                  type: integer
                  description: The new quantity for the item
                  example: 3
      responses:
        "200":
          description: Item quantity updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Cart item updated successfully
                  cart:
                    $ref: "#/components/schemas/CartItem"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Item not found in cart
        "500":
          description: Internal server error

  /cart/clear:
    delete:
      tags:
        - Cart
      security:
        - bearerAuth: []
      summary: Clear all items from the cart
      responses:
        "200":
          description: Cart cleared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Cart cleared successfully
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal server error

  # Order
  /order/create:
    post:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Place an order (Product/Food)
      requestBody:
        description: The data required to place an order
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cartId:
                  type: string
                  description: The ID of the cart
                  example: 66fc32743be26b54e9be9085
                paymentMethod:
                  type: string
                  description: The payment method for the order
                  example: cash
                orderNote:
                  type: string
                  description: A note for the order
                  example: Please deliver quickly
      responses:
        "201":
          description: Order placed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order placed successfully
                  order:
                    $ref: "#/components/schemas/Order"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal server error

  /order:
    get:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Get all orders for the current user
      description: Retrieve all orders placed by the authenticated user, including all items and price details.
      responses:
        "200":
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Order"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Orders not found
        "500":
          description: Internal server error

  /order/{orderId}:
    get:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Get order details by ID
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order
          schema:
            type: string
            example: 670ad27c5e1dd4288ee6cfc0
      responses:
        "200":
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    $ref: "#/components/schemas/Order"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /order/cancel/{orderId}:
    post:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Cancel an order by ID
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order
          schema:
            type: string
            example: 670ad27c5e1dd4288ee6cfc0
      requestBody:
        description: The data required to cancel an order
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  description: Reason for canceling the order
                  example: Changed my mind
      responses:
        "200":
          description: Order canceled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order canceled successfully
                  order:
                    $ref: "#/components/schemas/Order"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /order/status/{orderId}:
    patch:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Update the status of an order by ID (Partner)
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order
          schema:
            type: string
            example: 670ad27c5e1dd4288ee6cfc0
      requestBody:
        description: The status to update the order to
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderStatus:
                  type: string
                  description: The new status of the order
                  example: processing
      responses:
        "200":
          description: Order status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order status updated successfully
                  order:
                    $ref: "#/components/schemas/Order"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /order/partner/food-requests:
    get:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Get food orders requests for the partner
      responses:
        "200":
          description: Orders request retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Order"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Orders not found
        "500":
          description: Internal server error

  /order/partner/product-requests:
    get:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Get product orders requests for the partner
      responses:
        "200":
          description: Orders request retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Order"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Orders not found
        "500":
          description: Internal server error

  /order/partner/room-requests:
    get:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Get rooms requests for the partner
      responses:
        "200":
          description: Orders request retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Order"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Orders not found
        "500":
          description: Internal server error

  /order/partner/food-requests/{orderId}:
    patch:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Accept/Reject the order by ID (Partner)
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order
          schema:
            type: string
            example: 670ad27c5e1dd4288ee6cfc0
      requestBody:
        description: The status to update the order to
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                partnerResponse:
                  type: string
                  example: accepted/rejected
      responses:
        "200":
          description: Order status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order status updated successfully
                  order:
                    $ref: "#/components/schemas/Order"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /order/partner/product-requests/{orderId}:
    patch:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Accept/Reject the order by ID (Partner)
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order
          schema:
            type: string
            example: 670ad27c5e1dd4288ee6cfc0
      requestBody:
        description: The status to update the order to
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                partnerResponse:
                  type: string
                  example: accepted/rejected
      responses:
        "200":
          description: Order status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order status updated successfully
                  order:
                    $ref: "#/components/schemas/Order"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /order/partner/room-requests/{orderId}:
    patch:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Accept/Reject the order by ID (Partner)
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order
          schema:
            type: string
            example: 670ad27c5e1dd4288ee6cfc0
      requestBody:
        description: The status to update the order to
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                partnerResponse:
                  type: string
                  example: accepted/rejected
      responses:
        "200":
          description: Order status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order status updated successfully
                  order:
                    $ref: "#/components/schemas/Order"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /order/partner/orders-by-status:
    get:
      summary: "Get orders by status and item type"
      description: "Retrieve a list of orders filtered by order status and item type for a partner."
      tags:
        - "Order"
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: itemType
          schema:
            type: string
            enum: [food, room, product]
          required: false
          description: "Filter by item type: 'food', 'room', or 'product'. Optional parameter."
        - in: query
          name: orderStatus
          schema:
            type: string
            enum:
              [
                "pending",
                "accepted",
                "rejected",
                "ordered",
                "processing",
                "out_for_delivery",
                "pending_payment",
                "paid",
                "payment_failed",
                "delivered",
                "cancelled",
              ]
          required: false
          description: "Filter by order status. Optional parameter. Available options: 'Processing', 'Out for delivery', 'delivered', 'completed', 'canceled', 'rejected', 'accepted', 'Pending'."
      responses:
        200:
          description: "A list of orders filtered by status and item type."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        orderId:
                          type: string
                          example: "123456789"
                        orderNumber:
                          type: string
                          example: "#1612345678"
                        itemType:
                          type: string
                          example: "food"
                        orderStatus:
                          type: string
                          example: "accepted"
                        totalPrice:
                          type: number
                          format: float
                          example: 250.0
                        createdAt:
                          type: string
                          format: date-time
                          example: "2024-11-09T12:34:56.789Z"
                        updatedAt:
                          type: string
                          format: date-time
                          example: "2024-11-09T13:45:21.789Z"
        400:
          description: "Bad Request. Missing required parameters or invalid values."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: "Invalid request. 'orderStatus' parameter is required."
        401:
          description: "Unauthorized. Access token is missing or invalid."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: "Unauthorized access."

  /order/{orderId}/delivery-partner:
    post:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Update Delivery Partner Information (Partner)
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order
          schema:
            type: string
            example: 670ad27c5e1dd4288ee6cfc0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                phone:
                  type: string
                  example: 9938338383
      responses:
        "200":
          description: Refund requested successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Refund requested successfully
                  data:
                    $ref: "#/components/schemas/Order"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /order/user/{orderId}/request-refund-or-exchange:
    post:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Request a refund or exchange for specific items in an order
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order
          schema:
            type: string
            example: 670ad27c5e1dd4288ee6cfc0
      requestBody:
        description: Request a refund or exchange for specified items in the order
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemIds:
                  type: array
                  items:
                    type: string
                  description: Array of item IDs for which the refund or exchange is requested
                  example: ["671e0e0e4845c39926c3143a"]
                reason:
                  type: string
                  description: Reason for requesting the refund or exchange
                  example: "Customer changed their mind"
                action:
                  type: string
                  enum: ["refund", "exchange"]
                  description: Action to perform, either 'refund' or 'exchange'
                bankDetails:
                  type: object
                  properties:
                    country:
                      type: string
                    bankName:
                      type: string
                    accountName:
                      type: string
                    accountNumber:
                      type: string
                    ifscCode:
                      type: string
                  description: Bank details for refund processing (if applicable)
      responses:
        "200":
          description: Refund or exchange requested successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Refund or exchange requested successfully
                  data:
                    type: object
                    properties:
                      orderId:
                        type: string
                        example: "1730792577"
                      details:
                        type: object
                        properties:
                          reason:
                            type: string
                            example: "Customer changed their mind"
                          status:
                            type: string
                            enum: ["pending", "approved", "rejected"]
                            example: "pending"
                          requestedDate:
                            type: string
                            format: date-time
                            example: "2024-11-05T07:42:57.305Z"
                          amount:
                            type: number
                            example: 59.99
                          bankDetails:
                            type: object
                            properties:
                              country:
                                type: string
                                example: "India"
                              bankName:
                                type: string
                                example: "State Bank of India"
                              accountName:
                                type: string
                                example: "John Doe"
                              accountNumber:
                                type: string
                                example: "1234567890"
                              ifscCode:
                                type: string
                                example: "SBIN0000001"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Only users can request refunds or exchanges
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /order/partner/refunds:
    get:
      summary: Get Refund Details
      tags:
        - Order
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            example: 1
        - name: limit
          in: query
          required: false
          description: Number of refunds per page
          schema:
            type: integer
            default: 10
            example: 10
        - name: search
          in: query
          required: false
          description: Search query to filter by user name or order ID
          schema:
            type: string
        - name: sortBy
          in: query
          required: false
          description: Field to sort refunds by (e.g., `createdAt`, `amount`)
          schema:
            type: string
            default: "createdAt"
        - name: sortOrder
          in: query
          required: false
          description: Order of sorting, either `asc` or `desc`
          schema:
            type: string
            enum: [asc, desc]
            default: "desc"
        - name: status
          in: query
          required: false
          description: Filter refunds by status (e.g., `pending_admin`, `pending_partner` `approved`, `rejected`)
          schema:
            type: string
            enum: [pending_admin, pending_partner, approved, rejected]
        - name: fromDate
          in: query
          required: false
          description: Start date for filtering refunds
          schema:
            type: string
            format: date
            example: "2024-01-01"
        - name: toDate
          in: query
          required: false
          description: End date for filtering refunds
          schema:
            type: string
            format: date
            example: "2024-12-31"
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Admin User's refund details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Refund details fetched successfully
                  data:
                    type: object
                    properties:
                      docs:
                        type: array
                        items:
                          type: object
                          properties:
                            refundId:
                              type: string
                              example: "672c700fa1a40f804d63ef4a"
                            transactionId:
                              type: string
                              example: "672c700fa1a40f804d63ef4c"
                            createdAt:
                              type: string
                              format: date-time
                              example: "2024-11-08T05:13:24.489Z"
                            userName:
                              type: string
                              example: "John Doe"
                            orderId:
                              type: string
                              example: "1730965519"
                            status:
                              type: string
                              enum: ["pending", "approved", "rejected"]
                              example: "approved"
                            amount:
                              type: number
                              example: 59.99
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      totalDocs:
                        type: integer
                        example: 4
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /order/partner/{orderId}/refund-or-exchange/decision:
    patch:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Partner approves or rejects a refund or exchange request for an order
      parameters:
        - name: orderId
          in: path
          required: true
          description: The ID of the order for which the refund or exchange request is being processed
          schema:
            type: string
            example: 670ad27c5e1dd4288ee6cfc0
      requestBody:
        description: Decision by the partner to either accept or reject the refund or exchange request
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                decision:
                  type: string
                  enum: [accept, reject]
                  description: Decision by the partner on the refund or exchange request
                  example: accept
                action:
                  type: string
                  enum: ["refund", "exchange"]
                  description: Action to confirm for the request (either refund or exchange)
      responses:
        "200":
          description: Refund or exchange request processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Refund accepted successfully
                  data:
                    type: object
                    properties:
                      orderId:
                        type: string
                        example: "1730792577"
                      details:
                        type: object
                        properties:
                          reason:
                            type: string
                            example: "Customer changed their mind"
                          status:
                            type: string
                            enum: ["pending", "approved", "rejected"]
                            example: "approved"
                          requestedDate:
                            type: string
                            format: date-time
                            example: "2024-11-05T07:42:57.305Z"
                          approvedDate:
                            type: string
                            format: date-time
                            example: "2024-11-06T07:42:57.305Z"
                          amount:
                            type: number
                            example: 59.99
                          bankDetails:
                            type: object
                            properties:
                              country:
                                type: string
                                example: "India"
                              bankName:
                                type: string
                                example: "State Bank of India"
                              accountName:
                                type: string
                                example: "John Doe"
                              accountNumber:
                                type: string
                                example: "1234567890"
                              ifscCode:
                                type: string
                                example: "SBIN0000001"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Unauthorized access
        "404":
          description: Order not found or unauthorized access
        "500":
          description: Internal server error

  /order/partner/transactions:
    get:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Get transaction list for the partner with filters and pagination
      parameters:
        - in: query
          name: filter
          schema:
            type: string
            enum: [week, month, year]
          description: Time filter for transactions (e.g., "month" for current month transactions)
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of transactions per page
      responses:
        "200":
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "List retrieved successfully."
                  data:
                    type: object
                    properties:
                      docs:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                              example: "672c74923eb9872cfdf1e968"
                            orderId:
                              type: string
                              example: "1730966674"
                            transactionId:
                              type: string
                              example: "672c74943eb9872cfdf1e96c"
                            type:
                              type: string
                              example: "Payment Completed"
                            date:
                              type: string
                              format: date-time
                              example: "2024-11-07T08:04:36.733Z"
                            amount:
                              type: number
                              format: double
                              example: 10359.84
                            status:
                              type: string
                              example: "Completed"
                      totalDocs:
                        type: integer
                        example: 4
                      limit:
                        type: integer
                        example: 10
                      totalPages:
                        type: integer
                        example: 1
                      page:
                        type: integer
                        example: 1
                      pagingCounter:
                        type: integer
                        example: 1
                      hasPrevPage:
                        type: boolean
                        example: false
                      hasNextPage:
                        type: boolean
                        example: false
                      prevPage:
                        type: integer
                        nullable: true
                        example: null
                      nextPage:
                        type: integer
                        nullable: true
                        example: null
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Transactions not found
        "500":
          description: Internal server error

  /order/history/{category}:
    get:
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - name: category
          in: path
          required: true
          schema:
            type: string
            enum: [products, hotel, restaurant, dineout]
            example: products
        - name: status
          in: query
          required: false
          schema:
            type: string
            example: completed
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            example: 10
      summary: Get orders history by category for the user
      responses:
        "200":
          description: Orders history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      docs:
                        type: array
                        items:
                          $ref: "#/components/schemas/Order"
                      totalDocs:
                        type: integer
                        example: 20
                      limit:
                        type: integer
                        example: 10
                      totalPages:
                        type: integer
                        example: 2
                      page:
                        type: integer
                        example: 1
                      pagingCounter:
                        type: integer
                        example: 1
                      hasPrevPage:
                        type: boolean
                        example: false
                      hasNextPage:
                        type: boolean
                        example: true
                      prevPage:
                        type: integer
                        example: null
                      nextPage:
                        type: integer
                        example: 2
                  message:
                    type: string
                    example: "Products history retrieved successfully."
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Orders not found
        "500":
          description: Internal server error

  /order/history/all:
    get:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Get all orders history for the user
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            example: 10
      responses:
        "200":
          description: All orders history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      restaurants:
                        type: array
                        items:
                          $ref: "#/components/schemas/Order"
                      hotels:
                        type: array
                        items:
                          $ref: "#/components/schemas/Order"
                      products:
                        type: array
                        items:
                          $ref: "#/components/schemas/Order"
                      dineout:
                        type: array
                        items:
                          $ref: "#/components/schemas/DineOutRequest"
                  message:
                    type: string
                    example: "All history retrieved successfully."
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Orders not found
        "500":
          description: Internal server error

  # Partner
  /partner/auth/register:
    post:
      summary: Register a new partner
      tags:
        - Partner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                countryCode:
                  type: string
                  example: "+91"
                phone:
                  type: string
                password:
                  type: string
                confirmPassword:
                  type: string
                type:
                  type: string
                  example: partner
                businessType:
                  type: string
                  example: business_type_Id
                  description: The ID of the business type selected by the partner (ObjectId format)
              required:
                - name
                - email
                - phone
                - password
                - type
                - businessType
      security:
        - basicAuth: []
      responses:
        "200":
          description: Partner registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        "400":
          $ref: "#/components/responses/DuplicateEmail"

  /partner/auth/verify-mobile-otp:
    post:
      summary: Verify mobile OTP for a Partner
      tags:
        - Partner
      security:
        - basicAuth: [] # Use Basic Auth for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyOtpRequestUser"
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "OTP verified successfully"
        "400":
          description: Invalid OTP or request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"

  /partner/auth/verify-email-otp:
    post:
      summary: Verify email OTP for a partner
      tags:
        - Partner
      security:
        - basicAuth: [] # Use Basic Auth for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyOtpRequestUser"
      responses:
        "200":
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "OTP verified successfully"
        "400":
          description: Invalid OTP or request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"

  /partner/auth/login:
    post:
      summary: Partner login with email or phone and password
      tags:
        - Partner
      security:
        - basicAuth: [] # Use Basic Auth for login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrPhone:
                  type: string
                password:
                  type: string
                type:
                  type: string
                  example: partner
                  enum:
                    - user
                    - partner
              required:
                - emailOrPhone
                - password
                - type
      responses:
        "200":
          description: Partner logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokens"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /partner/auth/logout:
    post:
      summary: Partner logout
      tags:
        - Partner
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: The refresh token to be invalidated
              required:
                - refreshToken
      responses:
        "200":
          description: Partner logged out successfully
        "401":
          $ref: "#/components/responses/Unauthorized"

  /partner/auth/forgot-password:
    post:
      summary: Send forgot password otp to partner's email/phone
      tags:
        - Partner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrPhone:
                  type: string
                  format: email
                type:
                  type: string
                  enum:
                    - partner
              required:
                - emailOrPhone
                - type
      security:
        - basicAuth: []
      responses:
        "200":
          description: Reset password link sent successfully
        "404":
          $ref: "#/components/responses/NotFound"

  /partner/auth/reset-password:
    post:
      summary: Reset password using the provided token
      tags:
        - Partner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Reset password token
                newPassword:
                  type: string
              required:
                - token
                - newPassword
      security:
        - basicAuth: []
      responses:
        "200":
          description: Password reset successfully
        "400":
          description: Invalid token or new password
        "404":
          $ref: "#/components/responses/NotFound"

  /partner/auth/resend-otp:
    post:
      summary: Resend OTP for partner
      tags:
        - Partner
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResendOtpRequest"
      responses:
        "200":
          description: OTP resent successfully
        "400":
          description: Invalid request data
        "404":
          $ref: "#/components/responses/NotFound"

  /partner/change-password:
    post:
      summary: Partner change password
      tags:
        - Partner
      security:
        - bearerAuth: [] # Bearer token required for this route
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Password changed successfully"
        "400":
          $ref: "#/components/responses/PasswordMismatch"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/InvalidCurrentPassword"

  # Update email
  /partner/update-email:
    patch:
      summary: Update partner's email directly
      tags:
        - Partner
      security:
        - basicAuth: [] # Use Basic Auth for authenticated routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The ID of the partner/user
                email:
                  type: string
                  format: email
              required:
                - email
                - userId
      responses:
        "200":
          description: Email updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Email updated successfully"
        "400":
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  # Update phone
  /partner/update-phone:
    patch:
      summary: Update partner's phone directly
      tags:
        - Partner
      security:
        - basicAuth: [] # Use Basic Auth for authenticated routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The ID of the partner/user
                phone:
                  type: string
              required:
                - phone
                - userId
      responses:
        "200":
          description: Phone number updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: "Phone number updated successfully"
        "400":
          description: Invalid phone number
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /partner/profile/{id}:
    get:
      summary: Get partner profile by ID
      tags:
        - Partner
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the partner to retrieve
          schema:
            type: string
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Partner profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update partner profile
      tags:
        - Partner
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the partner to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the partner
                email:
                  type: string
                  format: email
                  description: Email address of the partner
                phone:
                  type: string
                  description: Phone number of the partner
                bio:
                  type: string
                  description: Short bio or description of the partner
                businessName:
                  type: string
                socialMediaLinks[]:
                  type: array
                  items:
                    type: string
                    description: Social media link
                  description: Array of up to 5 social media links (e.g., Facebook, Instagram)
                profilePhoto:
                  type: string
                  format: binary
                  description: Profile photo image file
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: Partner profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid input data
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /partner/{Id}/profile-image:
    delete:
      summary: Delete Profile image
      tags:
        - Partner
      parameters:
        - in: path
          name: Id
          required: true
          schema:
            type: string
          description: ID of the partner to delete profile image
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully Deleted
        "400":
          description: Bad Request
        "404":
          description: User Not Found
        "500":
          description: Internal Server Error

  # About Us
  /partner/auth/{id}/about-us:
    patch:
      summary: Add or Update Partner's About Us
      tags:
        - Partner
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the partner to add/update about us
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
      responses:
        "200":
          description: About Us information updated successfully
        "400":
          description: Invalid input data
        "404":
          description: Partner not found

    get:
      summary: Get Partner's about us by ID
      tags:
        - Partner
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Partner's About Us retrieved successfully
        "404":
          description: Partner not found

  # Dine-Out-Partner
  /dine-out/request/{requestId}:
    get:
      summary: Get DineOut requests details by ID
      tags:
        - DineOut (Partner)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: requestId
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{24}$"
          required: true
          description: The ID of the request
      responses:
        "200":
          description: dine-out requests of the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DineOutRequest"
        "403":
          description: Not authorized to update this request
        "404":
          description: DineOut request not found

  /dine-out/business/{businessId}:
    get:
      summary: Get all DineOut requests for a business
      tags:
        - DineOut (Partner)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: businessId
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{24}$"
          required: true
          description: The ID of the business
      responses:
        "200":
          description: List of dine-out requests for the business
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DineOutRequest"
        "404":
          description: No dine-out requests found for this business

  /dine-out/confirm/{requestId}:
    patch:
      summary: Update DineOut request status (Accept/Reject)
      tags:
        - DineOut (Partner)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: requestId
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{24}$"
          required: true
          description: The ID of the dine-out request to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [Accepted, Rejected]
                  description: The new status of the request
                  example: "Accepted"
      responses:
        "200":
          description: DineOut request status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Dine-out request accepted"
                  businessDetails:
                    type: object
                    properties:
                      businessName:
                        type: string
                        example: "Starbucks"
                      address:
                        type: string
                        example: "123 Business St, New York, USA"
                      openingDays:
                        type: array
                        items:
                          type: string
                        example:
                          - "Monday"
                          - "Friday"
                          - "Wednesday"
                      openingTime:
                        type: string
                        example: "09:00 AM"
                      closingTime:
                        type: string
                        example: "07:00 PM"
                  dineOutRequest:
                    $ref: "#/components/schemas/DineOutRequest"
        "403":
          description: Not authorized to update this request
        "404":
          description: DineOut request not found

  #Items
  /items/type/{categoryType}:
    get:
      summary: Get categories by type
      tags:
        - Partner Items
      security:
        - bearerAuth: []
      parameters:
        - name: categoryType
          in: path
          required: true
          description: The type of the category to retrieve
          schema:
            type: string
            enum:
              - food
              - product
              - room
      responses:
        "200":
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemCategory"
        "404":
          description: Categories not found
  /items/create:
    post:
      summary: Create a new item (Food, Room, or Product)
      tags:
        - Partner Items
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                itemType:
                  type: string
                  description: The type of the item (food, room, product)
                  enum:
                    - food
                    - room
                    - product
                  example: food
                businessId:
                  type: string
                  description: The ID of the associated business (ObjectId)
                  example: 60d0fe4f5311236168a109ca
                businessTypeId:
                  type: string
                  description: The ID of the associated business type (ObjectId)
                  example: 66db3c19490360a26a552adb
                available:
                  type: boolean
                  description: Availability status of the item
                  default: true

                # Common fields for all item types
                parentCategory:
                  type: string
                  description: The ID of the parent category for the item (Product and Food only)
                  example: "605c72bc6f1e3b30d4e3c5d4"
                subCategory:
                  type: string
                  description: The ID of the subcategory for the item (Product and Food only)
                  example: "605c72bc6f1e3b30d4e3c5d5"

                # Fields for food items (optional)
                dishName:
                  type: string
                  description: Name of the dish (food items only)
                  example: Pizza
                dishDescription:
                  type: string
                  description: Description of the dish (food items only)
                  example: "Delicious pizza with extra cheese"
                dishPrice:
                  type: number
                  description: Price of the dish (food items only)
                  example: 10.99
                foodDeliveryCharge:
                  type: number
                  description: Delivery charge of the dish (food items only)
                  example: 2.99

                # Fields for room items (optional)
                roomName:
                  type: string
                  description: Name of the room (room items only)
                  example: "Deluxe Room"
                roomCategory:
                  type: string
                  description: The ID of the category for room items
                  example: "605c72bc6f1e3b30d4e3c5d5"
                roomDescription:
                  type: string
                  description: Description of the room (room items only)
                  example: "Spacious room with sea view"
                roomPrice:
                  type: number
                  description: Price of the room (room items only)
                  example: 150
                roomCapacity:
                  type: number
                  description: Capacity of the room (as per guest)
                  example: 2
                checkIn:
                  type: string
                  format: date-time
                  description: Check-in date and time (ISO 8601 format) for room items only
                  example: "2024-11-01T14:00:00Z"
                checkOut:
                  type: string
                  format: date-time
                  description: Check-out date and time (ISO 8601 format) for room items only
                  example: "2024-11-05T11:00:00Z"

                # Amenities as a flattened array
                amenities[0]:
                  type: string
                  description: First amenity
                  example: "WiFi"
                amenities[1]:
                  type: string
                  description: Second amenity
                  example: "Air Conditioning"

                # Fields for product items (optional)
                productName:
                  type: string
                  description: Name of the product (product items only)
                  example: "T-Shirt"
                productDescription:
                  type: string
                  description: Description of the product (product items only)
                  example: "Comfortable cotton t-shirt"
                productPrice:
                  type: number
                  description: Price of the product (product items only)
                  example: 25.99
                productDeliveryCharge:
                  type: number
                  description: Delivery charge of the product (product items only)
                  example: 10.99
                productFeatures[0]:
                  type: string
                  description: First product feature (product items only)
                  example: "Eco-friendly"
                productFeatures[1]:
                  type: string
                  description: Second product feature (product items only)
                  example: "Lightweight"
                variants[0][variantName]:
                  type: string
                  description: Name of the variant (e.g., Small, Medium, Large)
                  example: "Medium"
                variants[0][size]:
                  type: string
                  description: Size of the variant
                  example: "M"
                variants[0][color]:
                  type: string
                  description: Color of the variant
                  example: "Red"
                variants[0][productPrice]:
                  type: number
                  description: Price of the variant
                  example: 29.99
                variants[0][nonReturnable]:
                  type: boolean
                  description: Indicates if the variant is non-returnable
                  default: false
                variants[0][variantImages]:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Images specific to the variant

                # Image upload
                images:
                  type: array
                  description: Images for the item
                  items:
                    type: string
                    format: binary
                  example: []

      responses:
        "201":
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        "400":
          description: Invalid request data
      security:
        - bearerAuth: []

  /items/{itemId}:
    get:
      summary: Get an item by its ID
      tags:
        - Partner Items
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the item to retrieve
      responses:
        "200":
          description: Item retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        "404":
          description: Item not found
      security:
        - bearerAuth: []

    patch:
      summary: Update an item by its ID
      tags:
        - Partner Items
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the item to update
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                itemType:
                  type: string
                  description: The type of the item (food, room, product)
                  enum:
                    - food
                    - room
                    - product
                  example: food
                businessId:
                  type: string
                  description: The ID of the associated business (ObjectId)
                  example: 60d0fe4f5311236168a109ca
                businessTypeId:
                  type: string
                  description: The ID of the associated business type (ObjectId)
                  example: 66db3c19490360a26a552adb
                available:
                  type: boolean
                  description: Availability status of the item
                  default: true

                # Common fields for all item types
                parentCategory:
                  type: string
                  description: The ID of the parent category for the item (Product only)
                  example: "605c72bc6f1e3b30d4e3c5d4"
                subCategory:
                  type: string
                  description: The ID of the subcategory for the item (Product only)
                  example: "605c72bc6f1e3b30d4e3c5d5"

                # Fields for food items (optional)
                foodCategory:
                  type: string
                  description: The ID of the category for food items
                  example: "605c72bc6f1e3b30d4e3c5d5"
                dishName:
                  type: string
                  description: Name of the dish (food items only)
                  example: Pizza
                dishDescription:
                  type: string
                  description: Description of the dish (food items only)
                  example: "Delicious pizza with extra cheese"
                dishPrice:
                  type: number
                  description: Price of the dish (food items only)
                  example: 10.99
                foodDeliveryCharge:
                  type: number
                  description: Delivery charge of the dish (food items only)
                  example: 2.99

                # Fields for room items (optional)
                roomName:
                  type: string
                  description: Name of the room (room items only)
                  example: "Deluxe Room"
                roomCategory:
                  type: string
                  description: The ID of the category for room items
                  example: "605c72bc6f1e3b30d4e3c5d5"
                roomDescription:
                  type: string
                  description: Description of the room (room items only)
                  example: "Spacious room with sea view"
                roomPrice:
                  type: number
                  description: Price of the room (room items only)
                  example: 150
                roomCapacity:
                  type: number
                  description: Capacity of the room (as per guest)
                  example: 2
                checkIn:
                  type: string
                  format: date-time
                  description: Check-in date and time (ISO 8601 format) for room items only
                  example: "2024-11-01T14:00:00Z"
                checkOut:
                  type: string
                  format: date-time
                  description: Check-out date and time (ISO 8601 format) for room items only
                  example: "2024-11-05T11:00:00Z"

                # Amenities as a flattened array
                amenities:
                  type: array
                  description: List of amenities for the room
                  items:
                    type: string
                  example: ["WiFi", "Air Conditioning", "Pool"]

                # Fields for product items (optional)
                productName:
                  type: string
                  description: Name of the product (product items only)
                  example: "T-Shirt"
                productDescription:
                  type: string
                  description: Description of the product (product items only)
                  example: "Comfortable cotton t-shirt"
                productPrice:
                  type: number
                  description: Price of the product (product items only)
                  example: 25.99
                productDeliveryCharge:
                  type: number
                  description: Delivery charge of the product (product items only)
                  example: 10.99
                productFeatures:
                  type: array
                  description: List of features of the product (optional)
                  items:
                    type: string
                  example: ["Eco-friendly", "Lightweight", "Machine washable"]
                variants[0][variantName]:
                  type: string
                  description: Name of the variant (e.g., Small, Medium, Large)
                  example: "Medium"
                variants[0][size]:
                  type: string
                  description: Size of the variant
                  example: "M"
                variants[0][color]:
                  type: string
                  description: Color of the variant
                  example: "Red"
                variants[0][productPrice]:
                  type: number
                  description: Price of the variant
                  example: 29.99
                variants[0][nonReturnable]:
                  type: boolean
                  description: Indicates if the variant is non-returnable
                  default: false
                variants[0][variantImages]:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Images specific to the variant

                # Image upload
                images:
                  type: array
                  description: Images for the item
                  items:
                    type: string
                    format: binary
                  example: []

      responses:
        "200":
          description: Item updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        "400":
          description: Invalid request data
        "404":
          description: Item not found
      security:
        - bearerAuth: []

    delete:
      summary: Delete an item by its ID
      tags:
        - Partner Items
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the item to delete
      responses:
        "200":
          description: Item deleted successfully
        "404":
          description: Item not found
      security:
        - bearerAuth: []

  /items/rooms/business/{businessId}:
    get:
      summary: Get rooms by business ID (User)
      tags:
        - Partner Items
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the business to retrieve rooms
      responses:
        "200":
          description: List of rooms retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Items"
        "404":
          description: Rooms not found
      security:
        - bearerAuth: []

  /items/foods/business/{businessId}:
    get:
      summary: Get food menu list by business ID
      tags:
        - Partner Items
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the business to retrieve food menu
      responses:
        "200":
          description: List of food menu retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Items"
        "404":
          description: food menu not found
      security:
        - bearerAuth: []

  /items/products/business/{businessId}:
    get:
      summary: Get products by business ID (User)
      tags:
        - Partner Items
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the business to retrieve products
      responses:
        "200":
          description: List of products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Items"
        "404":
          description: products not found
      security:
        - bearerAuth: []

  /items/business/{businessId}:
    get:
      summary: Get items by business ID
      tags:
        - Partner Items
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the business to retrieve items for
      responses:
        "200":
          description: List of items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Items"
        "404":
          description: Business not found
      security:
        - bearerAuth: []

  /items/business-type/{businessTypeId}:
    get:
      summary: Get items by business type ID
      tags:
        - Partner Items
      parameters:
        - name: businessTypeId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the business type to retrieve items for
      responses:
        "200":
          description: List of items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Items"
        "404":
          description: Business Type not found
      security:
        - bearerAuth: []

  # Partner Business
  /business:
    post:
      summary: Create a new business - Require Partner's Authentication
      tags:
        - Partner Business
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                businessName:
                  type: string
                  description: Name of the business
                  example: "My Awesome Business"
                businessType:
                  type: string
                  description: The ObjectId of the business type
                  example: "66db3c19490360a26a552adb"
                businessDescription:
                  type: string
                  description: A brief description of the business
                  example: "We provide high-quality services and offer a wide range of services and products for our customers."
                countryCode:
                  type: string
                  example: "+91"
                mobile:
                  type: string
                  description: Business mobile number
                  example: "1234567890"
                email:
                  type: string
                  description: Business email address
                  example: "business@example.com"
                businessAddress[street]:
                  type: string
                  description: Street address of the business
                  example: "123 Business St"
                businessAddress[city]:
                  type: string
                  description: City where the business is located
                  example: "City"
                businessAddress[state]:
                  type: string
                  description: State where the business is located
                  example: "State"
                businessAddress[country]:
                  type: string
                  description: Country where the business is located
                  example: "Country"
                businessAddress[postalCode]:
                  type: string
                  description: Postal code of the business location
                  example: "12345"
                businessAddress[latitude]:
                  type: number
                  description: Latitude of the business location
                  example: 28.6139
                businessAddress[longitude]:
                  type: number
                  description: Longitude of the business location
                  example: 77.2090
                businessAddress[location][type]:
                  type: string
                  description: GeoJSON type for the location (should be "Point")
                  example: "Point"
                businessAddress[location][coordinates][0]:
                  type: number
                  description: Longitude for the business location
                  example: 77.2090
                businessAddress[location][coordinates][1]:
                  type: number
                  description: Latitude for the business location
                  example: 28.6139
                openingDays[]:
                  type: array
                  description: Days of the week when the business is open
                  items:
                    type: string
                  example: ["Monday", "Tuesday", "Wednesday"]
                sameTimeForAllDays:
                  type: boolean
                  description: Indicates if the same opening and closing times apply for all days
                  example: false
                uniformTiming[openingTime]:
                  type: string
                  description: The opening time for the business, if `sameTimeForAllDays` is true
                  example: "10:00"
                uniformTiming[closingTime]:
                  type: string
                  description: The closing time for the business, if `sameTimeForAllDays` is true
                  example: "22:00"
                daywiseTimings[0][day]:
                  type: string
                  description: Day of the week
                  example: "Monday"
                daywiseTimings[0][openingTime]:
                  type: string
                  description: Opening time for this day
                  example: "10:00"
                daywiseTimings[0][closingTime]:
                  type: string
                  description: Closing time for this day
                  example: "22:00"
                # New Dine-In Fields
                dineInStatus:
                  type: boolean
                  description: Indicates if dine-in is available for the business
                  example: true
                operatingDetails[0][date]:
                  type: string
                  description: Date for which operating hours are defined
                  example: "2024-10-10"
                operatingDetails[0][startTime]:
                  type: string
                  description: Start time of the business for dine-in on the given date
                  example: "10:00"
                operatingDetails[0][endTime]:
                  type: string
                  description: End time of the business for dine-in on the given date
                  example: "22:00"
                tableManagement[0][tableNumber]:
                  type: string
                  description: Table number for dine-in management
                  example: "Table 1"
                tableManagement[0][seatingCapacity]:
                  type: number
                  description: Seating capacity of the table for dine-in management
                  example: 4
                bannerImages:
                  type: array
                  description: List of banner images to upload
                  items:
                    type: string
                    format: binary
                    description: Binary banner image files for the business
                    example: "banner1.jpg"
                galleryImages:
                  type: array
                  description: List of gallery images to upload
                  items:
                    type: string
                    format: binary
                    description: Binary gallery image files for the business
                    example: "gallery1.jpg"
      responses:
        "201":
          description: Business created successfully
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"

  /business/{id}:
    get:
      summary: Get business by business ID
      tags:
        - Partner Business
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Business ID
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Business found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartnerBusiness"
        "404":
          description: Business not found
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update a business by ID
      tags:
        - Partner Business
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the business to update
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                businessName:
                  type: string
                  description: Name of the business
                  example: "My Awesome Business"
                businessType:
                  type: string
                  description: The ObjectId of the business type
                  example: "66db3c19490360a26a552adb"
                businessDescription:
                  type: string
                  description: A brief description of the business
                  example: "We provide high-quality services and offer a wide range of services and products for our customers."
                countryCode:
                  type: string
                  example: "+91"
                mobile:
                  type: string
                  description: Business mobile number
                  example: "1234567890"
                email:
                  type: string
                  description: Business email address
                  example: "business@example.com"
                businessAddress[street]:
                  type: string
                  description: Street address of the business
                  example: "123 Business St"
                businessAddress[city]:
                  type: string
                  description: City where the business is located
                  example: "City"
                businessAddress[state]:
                  type: string
                  description: State where the business is located
                  example: "State"
                businessAddress[country]:
                  type: string
                  description: Country where the business is located
                  example: "Country"
                businessAddress[postalCode]:
                  type: string
                  description: Postal code of the business location
                  example: "12345"
                businessAddress[latitude]:
                  type: number
                  description: Latitude of the business location
                  example: 28.6139
                businessAddress[longitude]:
                  type: number
                  description: Longitude of the business location
                  example: 77.2090
                businessAddress[location][type]:
                  type: string
                  description: GeoJSON type for the location (should be "Point")
                  example: "Point"
                businessAddress[location][coordinates][0]:
                  type: number
                  description: Longitude for the business location
                  example: 77.2090
                businessAddress[location][coordinates][1]:
                  type: number
                  description: Latitude for the business location
                  example: 28.6139
                openingDays[]:
                  type: array
                  description: Days of the week when the business is open
                  items:
                    type: string
                  example: ["Monday", "Tuesday", "Wednesday"]
                sameTimeForAllDays:
                  type: boolean
                  description: Indicates if the same opening and closing times apply for all days
                  example: false
                uniformTiming[openingTime]:
                  type: string
                  description: The opening time for the business, if `sameTimeForAllDays` is true
                  example: "10:00"
                uniformTiming[closingTime]:
                  type: string
                  description: The closing time for the business, if `sameTimeForAllDays` is true
                  example: "22:00"
                daywiseTimings[0][day]:
                  type: string
                  description: Day of the week
                  example: "Monday"
                daywiseTimings[0][openingTime]:
                  type: string
                  description: Opening time for this day
                  example: "10:00"
                daywiseTimings[0][closingTime]:
                  type: string
                  description: Closing time for this day
                  example: "22:00"
                # New Dine-In Fields
                dineInStatus:
                  type: boolean
                  description: Indicates if dine-in is available for the business
                  example: true
                operatingDetails[0][date]:
                  type: string
                  description: Date for which operating hours are defined
                  example: "2024-10-10"
                operatingDetails[0][startTime]:
                  type: string
                  description: Start time of the business for dine-in on the given date
                  example: "10:00"
                operatingDetails[0][endTime]:
                  type: string
                  description: End time of the business for dine-in on the given date
                  example: "22:00"
                tableManagement[0][tableNumber]:
                  type: string
                  description: Table number for dine-in management
                  example: "Table 1"
                tableManagement[0][seatingCapacity]:
                  type: number
                  description: Seating capacity of the table for dine-in management
                  example: 4
                bannerImages:
                  type: array
                  description: List of banner images to upload
                  items:
                    type: string
                    format: binary
                    description: Binary banner image files for the business
                    example: "banner1.jpg"
                galleryImages:
                  type: array
                  description: List of gallery images to upload
                  items:
                    type: string
                    format: binary
                    description: Binary gallery image files for the business
                    example: "gallery1.jpg"
      responses:
        "200":
          description: Business updated successfully
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    delete:
      summary: Delete a business
      tags:
        - Partner Business
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the business to delete
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "200":
          description: Business deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /business/{businessId}/images:
    delete:
      summary: Delete Business Images (Gallery/Banner)
      tags:
        - Partner Business
      parameters:
        - name: businessId
          in: path
          required: true
          schema:
            type: string
          description: Business ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                imageUrl:
                  type: string
                imageType:
                  type: string
                  example: gallery/banner
              required:
                - imageUrl
                - imageType
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "200":
          description: Business images deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /business/type/{businessTypeId}:
    get:
      summary: Get businesses by business type ID (User)
      tags:
        - Partner Business
      parameters:
        - name: businessTypeId
          in: path
          required: true
          schema:
            type: string
          description: Business type ID
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number for pagination (default- 1)
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Number of items per page (default- 10)
        - name: searchBy
          in: query
          required: false
          schema:
            type: string
          description: Search term to filter businesses by name (case-insensitive)
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [businessName, createdAt, updatedAt]
            default: createdAt
          description: Field to sort the results by (default- createdAt)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Businesses found under business type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartnerBusiness"
        "404":
          description: Business not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /business/partner/{partnerId}:
    get:
      summary: Get business by partner's ID
      tags:
        - Partner Business
      parameters:
        - name: partnerId
          in: path
          required: true
          schema:
            type: string
          description: Partner's ID
        - in: query
          name: page
          required: false
          schema:
            type: integer
            format: int32
            example: 1
          description: Page number for pagination (default is 1)
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
            example: 10
          description: Number of results per page (default is 10)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Business found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      docs:
                        type: array
                        items:
                          $ref: "#/components/schemas/PartnerBusiness"
                      totalDocs:
                        type: integer
                        description: Total number of businesses
                      limit:
                        type: integer
                        description: Limit of businesses per page
                      totalPages:
                        type: integer
                        description: Total number of pages
                      page:
                        type: integer
                        description: Current page number
                      hasPrevPage:
                        type: boolean
                      hasNextPage:
                        type: boolean
                      prevPage:
                        type: integer
                        nullable: true
                      nextPage:
                        type: integer
                        nullable: true
        "404":
          description: Business not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /business/near:
    get:
      summary: Get Nearby Businesses
      tags:
        - Partner Business
      parameters:
        - in: query
          name: latitude
          required: true
          schema:
            type: number
            format: float
            example: 40.7128
        - in: query
          name: longitude
          required: true
          schema:
            type: number
            format: float
            example: -74.0060
        - in: query
          name: radiusInKm
          required: true
          schema:
            type: number
            format: float
            example: 10
          description: The search radius in kilometers
        - in: query
          name: page
          required: false
          schema:
            type: integer
            format: int32
            example: 1
          description: The page number for pagination (default is 1)
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
            example: 10
          description: The number of results to return per page (default is 10)
        - name: search
          in: query
          required: false
          schema:
            type: string
          description: Search term to filter businesses
        - in: query
          name: businessTypeId
          required: false
          schema:
            type: string
          description: The ObjectId of the business type (e.g., "670818c41fb33bc722b274a9" for "hotels")
      responses:
        "200":
          description: A list of nearby businesses
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      docs:
                        type: array
                        items:
                          $ref: "#/components/schemas/PartnerBusiness"
                      totalDocs:
                        type: integer
                        description: Total number of businesses found
                      limit:
                        type: integer
                        description: Limit of businesses per page
                      totalPages:
                        type: integer
                        description: Total number of pages
                      page:
                        type: integer
                        description: Current page number
                      hasPrevPage:
                        type: boolean
                      hasNextPage:
                        type: boolean
                      prevPage:
                        type: integer
                        nullable: true
                      nextPage:
                        type: integer
                        nullable: true
        "400":
          description: Invalid latitude, longitude, or radius input
        "404":
          description: No businesses found nearby

  /business/hotels/nearby:
    get:
      summary: Get Nearby Hotels
      tags:
        - Partner Business
      parameters:
        - in: query
          name: latitude
          required: true
          schema:
            type: number
            format: float
            example: 40.7128
        - in: query
          name: longitude
          required: true
          schema:
            type: number
            format: float
            example: -74.0060
        - in: query
          name: radiusInKm
          required: true
          schema:
            type: number
            format: float
            example: 10
          description: The search radius in kilometers
        - in: query
          name: checkIn
          required: false
          schema:
            type: string
            format: date-time
          description: Check-in date and time for hotel bookings (ISO 8601 format)
        - in: query
          name: checkOut
          required: false
          schema:
            type: string
            format: date-time
          description: Check-out date and time for hotel bookings (ISO 8601 format)
        - in: query
          name: guests
          required: false
          schema:
            type: integer
            format: int32
          description: Number of guests for hotel bookings
        - in: query
          name: roomQuantity
          required: false
          schema:
            type: integer
            format: int32
          description: Number of rooms required for hotel bookings
        - in: query
          name: page
          required: false
          schema:
            type: integer
            format: int32
            example: 1
          description: The page number for pagination (default is 1)
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            format: int32
            example: 10
          description: The number of results to return per page (default is 10)
      responses:
        "200":
          description: A list of nearby hotels
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      docs:
                        type: array
                        items:
                          $ref: "#/components/schemas/PartnerBusiness"
                      totalDocs:
                        type: integer
                        description: Total number of businesses found
                      limit:
                        type: integer
                        description: Limit of businesses per page
                      totalPages:
                        type: integer
                        description: Total number of pages
                      page:
                        type: integer
                        description: Current page number
                      hasPrevPage:
                        type: boolean
                      hasNextPage:
                        type: boolean
                      prevPage:
                        type: integer
                        nullable: true
                      nextPage:
                        type: integer
                        nullable: true
        "400":
          description: Invalid latitude, longitude, or radius input
        "404":
          description: No hotels found nearby

  /business/dashboard/counts:
    get:
      summary: Business Dashboard
      tags:
        - Partner Business
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Businesses found under business type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartnerBusiness"
        "404":
          description: Business not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /business/dashboard/orders:
    get:
      tags:
        - Partner Business
      summary: Retrieve orders based on type for partner's dashboard
      description: >
        Fetch a list of orders for a partner's dashboard, filtered by type. This endpoint supports fetching lists of different order categories such as food orders, hotel bookings, product orders, tables, and dine-out requests.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum:
              # Restaurant-specific types
              - availableTables
              - currentFoodOrders
              - confirmedFoodOrders
              - acceptedFoodOrders
              - rejectedFoodOrders
              - deliveredFoodOrders
              - cancelledFoodOrders

              # Hotel-specific types
              - currentHotelBookings
              - confirmedHotelBookings
              - acceptedHotelBookings
              - rejectedHotelBookings

              # Product-specific types
              - currentProductOrders
              - confirmedProductOrders
              - acceptedProductOrders
              - rejectedProductOrders
              - deliveredProductOrders
              - cancelledProductOrders

              # Dine-out specific types
              - pendingDineOutRequests
              - confirmedDineOutRequests
              - acceptedDineOutRequests
              - rejectedDineOutRequests

          description: Type of order list to retrieve. Examples include available tables, current hotel bookings, and accepted product orders.
      responses:
        "200":
          description: Successfully retrieved the list of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: List for confirmedProductOrders fetched successfully.
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "6725297dcff9a0a162c7dcbf"
                        user:
                          type: string
                          example: "6708c7f129ca8a1d5d8268b8"
                        partner:
                          type: string
                          example: "6708ce9f27762037c2bd656a"
                        items:
                          type: array
                          items:
                            type: object
                            properties:
                              item:
                                type: object
                                properties:
                                  _id:
                                    type: string
                                    example: "671e0e0e4845c39926c3143a"
                                  name:
                                    type: string
                                    example: "Red T-Shirt"
                                  price:
                                    type: number
                                    format: float
                                    example: 29.99
                                  itemType:
                                    type: string
                                    enum: [product, food, room]
                                    example: "product"
                              quantity:
                                type: integer
                                example: 2
                              selectedSize:
                                type: string
                                example: "M"
                              selectedColor:
                                type: string
                                example: "Red"
                        deliveryAddress:
                          type: object
                          properties:
                            name:
                              type: string
                              example: "Shravan Patel"
                            street:
                              type: string
                              example: "Station Road, Mahaveer Bhawan"
                            city:
                              type: string
                              example: "Swaroopganj"
                            state:
                              type: string
                              example: "Rajasthan"
                            country:
                              type: string
                              example: "India"
                            postalCode:
                              type: string
                              example: "307023"
                            phone:
                              type: string
                              example: "7742026070"
                        totalPrice:
                          type: number
                          format: float
                          example: 73.969
                        subtotal:
                          type: number
                          format: float
                          example: 59.98
                        tax:
                          type: number
                          format: float
                          example: 2.999
                        deliveryCharge:
                          type: number
                          format: float
                          example: 10.99
                        orderStatus:
                          type: string
                          enum:
                            [
                              pending,
                              accepted,
                              rejected,
                              ordered,
                              processing,
                              out_for_delivery,
                              pending_payment,
                              paid,
                              payment_failed,
                              delivered,
                              cancelled,
                            ]
                          example: "accepted"
                        paymentMethod:
                          type: string
                          enum:
                            [credit_card, paypal, cash, online, bank_transfer]
                          example: "cash"
                        refundStatus:
                          type: string
                          enum: [none, pending, approved, rejected]
                          example: "approved"
                        transactionHistory:
                          type: array
                          items:
                            type: object
                            properties:
                              type:
                                type: string
                                example: "Order Placed"
                              date:
                                type: string
                                format: date-time
                                example: "2024-11-01T19:18:21.485Z"
                              amount:
                                type: number
                                format: float
                                example: 73.969
                              status:
                                type: string
                                example: "Completed"
                              refundDetails:
                                type: object
                                properties:
                                  reason:
                                    type: string
                                    example: "Product defect"
                                  bankDetails:
                                    type: object
                                    properties:
                                      country:
                                        type: string
                                        example: "India"
                                      bankName:
                                        type: string
                                        example: "State Bank of India"
                                      accountName:
                                        type: string
                                        example: "John Doe"
                                      accountNumber:
                                        type: string
                                        example: "1234567890"
                                      ifscCode:
                                        type: string
                                        example: "SBIN0000001"
        "400":
          description: Bad request due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Invalid type for order list retrieval.
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: Unauthorized access.

  # Post
  /posts:
    post:
      summary: Create a new post
      tags:
        - Post
      security:
        - bearerAuth: [] # Bearer token required for this route
      requestBody:
        required: true
        content:
          multipart/form-data: # Use multipart/form-data for file uploads
            schema:
              type: object
              properties:
                caption:
                  type: string
                  description: Caption of the post
                type:
                  type: string
                  description: Type of a post
                  example: photo/reel
                images:
                  type: array
                  items:
                    type: string
                    format: binary # For file uploads (images)
                  description: Array of image files
                video:
                  type: string
                  format: binary # For file upload (single video)
                  description: Single video file
      responses:
        "201":
          description: Post created successfully
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"

    get:
      summary: Get list of all posts
      tags:
        - Post
      security:
        - bearerAuth: [] # Bearer token required for this route
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          description: Page number for pagination (optional)
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          description: Number of posts per page (optional)
        - in: query
          name: search
          schema:
            type: string
          description: Search query to filter posts by caption (optional)
      responses:
        "200":
          description: List of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /posts/user/{userId}:
    get:
      summary: Get post by user ID
      tags:
        - Post
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: User ID
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          description: Page number for pagination (optional)
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          description: Number of posts per page (optional)
        - in: query
          name: search
          schema:
            type: string
          description: Search query to filter posts by caption (optional)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Post found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Post not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /posts/{id}:
    get:
      summary: Get post by ID
      tags:
        - Post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Post ID
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Post found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Post not found
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update a post by ID
      tags:
        - Post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the post to update
      requestBody:
        required: true
        content:
          multipart/form-data: # Use multipart/form-data for file uploads
            schema:
              type: object
              properties:
                caption:
                  type: string
                  description: Caption of the post
                images:
                  type: array
                  items:
                    type: string
                    format: binary # For file uploads (images)
                  description: Array of image files
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "200":
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    delete:
      summary: Delete a post
      tags:
        - Post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the post to delete
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "200":
          description: Post deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /posts/{postId}/like:
    post:
      summary: Like a post
      tags:
        - Post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the post to like
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "201":
          description: Post Liked successfully
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"

  /posts/{postId}/unlike:
    delete:
      summary: Unlike a post
      tags:
        - Post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the post to unlike
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "201":
          description: Post Unliked successfully
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"

  /posts/{postId}/comments:
    post:
      summary: Add a comment on post
      tags:
        - Post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the post to comment
      security:
        - bearerAuth: [] # Bearer token required for this route
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: The text to add comment
      responses:
        "201":
          description: Comment added successfully
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"

  /posts/{commentId}:
    delete:
      summary: Delete a comment
      tags:
        - Post
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the comment to delete
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "201":
          description: Comment deleted successfully
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"

  /posts/{postId}/save:
    post:
      summary: Save a post
      tags:
        - Post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the post to save
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "201":
          description: Post Saved successfully
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"

  /posts/{postId}/unsave:
    delete:
      summary: Unsave a post
      tags:
        - Post
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the post to unsave
      security:
        - bearerAuth: [] # Bearer token required for this route
      responses:
        "201":
          description: Post Unsaved successfully
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"

  /posts/saved-posts:
    get:
      summary: Get list of saved posts
      tags:
        - Post
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          description: Page number for pagination (optional)
        - in: query
          name: limit
          schema:
            type: integer
            example: 10
          description: Number of posts per page (optional)
        - in: query
          name: search
          schema:
            type: string
          description: Search query to filter posts by caption (optional)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Post found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Post not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  #  Guest Users
  # GUEST USERS ITEMS
  /items/guest:
    get:
      summary: Get All Items for guest user (Product, Room, Food)
      tags:
        - Guest User
      responses:
        "200":
          description: Post found
        "404":
          description: Post not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /items/guest/search:
    get:
      summary: Search Items for guest user (Pizza, t-shirt)
      tags:
        - Guest User
      parameters:
        - in: query
          name: search
          schema:
            type: string
      responses:
        "200":
          description: not found
        "404":
          description: not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /items/guest/{itemId}:
    get:
      summary: Get Item Details
      tags:
        - Guest User
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: found
        "404":
          description: not found
        "401":
          $ref: "#/components/responses/Unauthorized"
  # GUEST USERS CART
  /cart/guest/add:
    post:
      tags:
        - Guest User
      summary: Add an item to the cart (Product/Food/Room(Checkout))
      requestBody:
        description: The data required to add an item to the cart
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                guestId:
                  type: string
                  desciption: The guest id to uniquely identify guest
                  example: guest_123456
                itemId:
                  type: string
                  description: The ID of the product or food item
                  example: 66fc32743be26b54e9be9085
                quantity:
                  type: integer
                  description: The quantity to add to the cart
                  example: 2
                checkIn:
                  type: string
                  description: The check in for the room
                  example: 2024-10-20
                checkOut:
                  type: string
                  description: The check out for the room
                  example: 2024-10-20
                selectedSize:
                  type: string
                  description: Size of the product (if applicable)
                  example: M
                selectedColor:
                  type: string
                  description: Color of the product (if applicable)
                  example: Red
                deliveryAddress:
                  $ref: "#/components/schemas/DeliveryAddress"
      responses:
        "200":
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product added to cart successfully
                  cart:
                    $ref: "#/components/schemas/CartItem"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "500":
          description: Internal server error

  /cart/guest/{guestId}:
    get:
      summary: Get Guest user's cart detail
      tags:
        - Guest User
      parameters:
        - name: guestId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: found
        "404":
          description: not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /cart/guest/remove:
    delete:
      summary: Remove Item from guest's cart
      tags:
        - Guest User
      requestBody:
        description: The data required to remove an item from cart
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                guestId:
                  type: string
                  desciption: The guest id to uniquely identify guest
                cartItemId:
                  type: string
                  description: The ID of the product or food item
                  example: 66fc32743be26b54e9be9085
      responses:
        "200":
          description: found
        "404":
          description: not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /cart/guest/clear:
    delete:
      summary: Clear guest's cart
      tags:
        - Guest User
      requestBody:
        description: The data required to remove an item from cart
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                guestId:
                  type: string
                  desciption: The guest id to uniquely identify guest
      responses:
        "200":
          description: found
        "404":
          description: not found
        "401":
          $ref: "#/components/responses/Unauthorized"
  # GUEST USERS BUSINESS
  /business/guest:
    get:
      summary: Get All Business for guest user
      tags:
        - Guest User
      responses:
        "200":
          description: found
        "404":
          description: not found
        "401":
          $ref: "#/components/responses/Unauthorized"
  # GUEST USERS STATIC PAGES
  /static-content/guest/for/user:
    get:
      summary: Get static pages for guest user
      tags:
        - Guest User
      responses:
        "200":
          description: found
        "404":
          description: not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /static-content/guest/for-user/{for}/{type}:
    get:
      summary: guests user to get a specific static page
      tags:
        - Guest User
      parameters:
        - name: for
          in: path
          required: true
          example: 0 for user, 1 for partner
          schema:
            type: string
        - name: type
          in: path
          required: true
          example: privacy
          schema:
            type: string
      responses:
        "200":
          description: found
        "404":
          description: not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /static-content/guest/using-pageId/{pageId}:
    get:
      summary: guests user to get a specific static page by ID
      tags:
        - Guest User
      parameters:
        - name: pageId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: found
        "404":
          description: not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  # FAQ
  /faq:
    get:
      summary: Get a list of FAQs (Admin)
      tags:
        - FAQ (Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: sortBy
          in: query
          required: false
          description: Sort order (asc/desc)
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: limit
          in: query
          required: false
          description: Number of FAQs per page
          schema:
            type: integer
            default: 10
        - name: searchBy
          in: query
          required: false
          description: Keyword to search by question or answer
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: Filter by FAQ status
          schema:
            type: number
            enum: [1, 0]
      responses:
        "200":
          description: List of FAQs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FAQ"
        "400":
          description: Invalid query parameters
        "401":
          $ref: "#/components/responses/Unauthorized"

    post:
      summary: Create a new FAQ (Admin)
      tags:
        - FAQ (Admin)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: The question of the FAQ
                answer:
                  type: string
                  description: The answer to the FAQ
                status:
                  type: number
                  enum: [1, 0]
                  description: Status of the FAQ
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "201":
          description: FAQ created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FAQ"
        "400":
          description: Invalid input
        "401":
          $ref: "#/components/responses/Unauthorized"

  /faq/{id}:
    get:
      summary: Get FAQ by ID (Admin)
      tags:
        - FAQ (Admin)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the FAQ to retrieve
          schema:
            type: string
      responses:
        "200":
          description: FAQ retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FAQ"
        "404":
          description: FAQ not found
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update FAQ by ID (Admin)
      tags:
        - FAQ (Admin)
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the FAQ to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                answer:
                  type: string
                status:
                  type: number
                  enum: [1, 0]
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "200":
          description: FAQ updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FAQ"
        "400":
          description: Invalid input
        "404":
          description: FAQ not found
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      summary: Delete FAQ by ID (Admin)
      tags:
        - FAQ (Admin)
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the FAQ to delete
          schema:
            type: string
      security:
        - bearerAuth: [] # Use Bearer Token for authenticated routes
      responses:
        "204":
          description: FAQ deleted successfully
        "404":
          description: FAQ not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /faq/for/user:
    get:
      summary: Get a list of FAQs (User)
      tags:
        - FAQ (User)
      security:
        - basicAuth: []
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: sortBy
          in: query
          required: false
          description: Sort order (asc/desc)
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: for
          in: query
          required: false
          description: FAQ for (user or vendor) 0 For User, 1 For Vendor, and 2 For Both
          schema:
            type: string
            enum: [0, 1, 2]
            default: 0
        - name: limit
          in: query
          required: false
          description: Number of FAQs per page
          schema:
            type: integer
            default: 10
        - name: searchBy
          in: query
          required: false
          description: Keyword to search by question or answer
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: Filter by FAQ status (only "active" for users)
          schema:
            type: string
            enum: [active]
            default: active
      responses:
        "200":
          description: List of FAQs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FAQ"
        "400":
          description: Invalid query parameters

  /static-content/for/admin:
    get:
      summary: Get a list of static content (Admin)
      tags:
        - Static Content (Admin)
      parameters:
        - name: page
          in: query
          required: false
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: sortBy
          in: query
          required: false
          description: Sort order (asc/desc)
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: limit
          in: query
          required: false
          description: Number of items per page
          schema:
            type: integer
            default: 10
        - name: searchBy
          in: query
          required: false
          description: Search keyword to filter static content by title or content
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: Filter by status of the content
          schema:
            type: string
            enum: [active, inactive]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of static content retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StaticContent"
        "400":
          description: Invalid query parameters
        "401":
          $ref: "#/components/responses/Unauthorized"

  /static-content/for/admin/terms:
    get:
      summary: Get Terms and Conditions (Admin)
      tags:
        - Static Content (Admin)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Terms and Conditions content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticContent"
        "404":
          description: Terms and Conditions content not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /static-content/for/admin/refund-policy:
    get:
      summary: Get Refund Policy (Admin)
      tags:
        - Static Content (Admin)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Refund Policy content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticContent"
        "404":
          description: Refund Policy content not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /static-content/for/admin/shipping-policy:
    get:
      summary: Get Shipping Policy (Admin)
      tags:
        - Static Content (Admin)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Shipping Policy content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticContent"
        "404":
          description: Shipping Policy content not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /static-content/for/admin/privacy:
    get:
      summary: Get Privacy Policy (Admin)
      tags:
        - Static Content (Admin)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Privacy Policy content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticContent"
        "404":
          description: Privacy Policy content not found
        "401":
          $ref: "#/components/responses/Unauthorized"

  /static-content/for-user/terms:
    get:
      summary: Get Terms and Conditions (User)
      tags:
        - Static Content (User)
      security:
        - basicAuth: []
      responses:
        "200":
          description: Terms and Conditions content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticContent"
        "404":
          description: Terms and Conditions content not found

  /static-content/for-user/refund-policy:
    get:
      summary: Get Refund Policy (User)
      tags:
        - Static Content (User)
      security:
        - basicAuth: []
      responses:
        "200":
          description: Refund Policy content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticContent"
        "404":
          description: Refund Policy content not found

  /static-content/for-user/shipping-policy:
    get:
      summary: Get Shipping Policy (User)
      tags:
        - Static Content (User)
      security:
        - basicAuth: []
      responses:
        "200":
          description: Shipping Policy content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticContent"
        "404":
          description: Shipping Policy content not found

  /static-content/for-user/privacy:
    get:
      summary: Get Privacy Policy (User)
      tags:
        - Static Content (User)
      security:
        - basicAuth: []
      responses:
        "200":
          description: Privacy Policy content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticContent"
        "404":
          description: Privacy Policy content not found

  /static-content/for-user/2/about-us:
    get:
      summary: Get Refund Policy (User)
      tags:
        - Static Content (User)
      security:
        - basicAuth: []
      responses:
        "200":
          description: Refund Policy content retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StaticContent"
        "404":
          description: Refund Policy content not found

  # Contact US
  /contact-us:
    get:
      summary: Get all list
      tags:
        - Contact Us
      security:
        - bearerAuth: [] # Admin Bearer token required for this route
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order for contact us (asc or desc)
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 10
          description: Limit number of results per page
        - name: searchBy
          in: query
          required: false
          schema:
            type: string
          description: Search contact us by name or any specific field
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [1, 0]
          description: Filter by status (active or inactive)
      responses:
        "200":
          description: List of contact us
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    post:
      summary: Post a contact
      tags:
        - Contact Us
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                message:
                  type: string
              required:
                - firstName
                - lastName
                - email
                - message
      security:
        - basicAuth: []
      responses:
        "200":
          description: Successfully Post Contact
        "404":
          $ref: "#/components/responses/NotFound"

  /contact-us/{id}:
    get:
      summary: Get details of a specific contact
      tags:
        - Contact Us
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the contact to retrieve
      security:
        - bearerAuth: [] # Admin Bearer token required for this route
      responses:
        "200":
          description: Contact Us details
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

    patch:
      summary: Update Contact
      tags:
        - Contact Us
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the Contact to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                message:
                  type: string
      security:
        - bearerAuth: [] # Admin Bearer Token for authenticated routes
      responses:
        "200":
          description: Contact updated successfully
        "400":
          description: Invalid input
        "404":
          description: Contact not found
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      summary: Delete a contact
      tags:
        - Contact Us
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the contact to delete
      security:
        - bearerAuth: [] # Admin Bearer token required for this route
      responses:
        "200":
          description: Contact deleted successfully
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"

  # Other routes can be updated similarly for User and Partner with appropriate security mechanism
